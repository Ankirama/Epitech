#!/usr/bin/python2.7

import sys
import time

def     usage():
    '''display usage'''
    print "Usage : ./107transfert \"A|B|C|D|E|F\""
    print "./107transfert \"A|B|C|D\" \"E|F|G|C\" ..."
    sys.exit()

def     horner(poly):
    x = 0
    while (x <= 1000):
        result = 0
        for coef in poly:
            result = result * x + coef
        x = x + 0.001

def     soNaif(poly):
    result = 0
    x = 0
    length = len(poly)
    while (x <= 1000):
        i = 0
        while (i < length):
            result += (x ** (length - i - 1)) * poly[length - i - 1]
            i += 1
        x += 0.001

def     option1():
    arr = []
    try:
        i = 0
        while (i < len(sys.argv[1])):
            nbr = 0
            while (i < len(sys.argv[1]) and sys.argv[1][i] != '|'):
                nbr = nbr * 10 + (int(sys.argv[1][i]))
                i += 1
            arr.append(nbr)
            i += 1
    except ValueError as e:
        print "error: {}".format(e)
        sys.exit()
    poly = "evaluation du polynome "
    i = 0
    while (i < len(arr)):
        if (arr[i] != 0):
            poly += (str(arr[i]))
            if (len(arr) - i - 1 != 0):
                poly += "x" + "^"
                poly += str(len(arr) - i - 1)
                poly += " + "
        i += 1
    print "{}".format(poly)
    time1 = time.clock()
    soNaif(arr)
    time2 = time.clock()
    print "algorithme naif: {} millisecondes".format((time2 - time1) * 100)
    time1 = time.clock()
    horner(arr)
    time3 = time.clock()
    print "methode de Horner: {} millisecondes".format((time3 - time1) * 100)

def     main():
    '''main function to check params'''
    if (len(sys.argv) < 2 or (len(sys.argv) > 3 and len(sys.argv) - 1 % 2 == 0)):
        usage()
    if (len(sys.argv) == 2):
        option1()

if __name__ == "__main__":
    main()
