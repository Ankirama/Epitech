.TH "GenerateMaze" 3 "Tue Jun 9 2015" "Version 0.53" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GenerateMaze \- Generate maze (char *)  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <GenerateMaze\&.hh>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBcreate\fP (int width, int height)"
.br
.RI "\fIGenerate normal map (like bomberman) \fP"
.ti -1c
.RI "void \fBcreateRandom\fP (int width, int height)"
.br
.RI "\fIGenerate random map\&. \fP"
.ti -1c
.RI "char * \fBgetMap\fP () const "
.br
.RI "\fIget the map generated \fP"
.ti -1c
.RI "std::vector< std::pair< int, int > > & \fBgetEmptyCells\fP ()"
.br
.RI "\fIget empty cells in map \fP"
.ti -1c
.RI "void \fBsetCell\fP (int x, int y, int id_cell)"
.br
.RI "\fIset a cell in the map \fP"
.ti -1c
.RI "int \fBgetCell\fP (int x, int y)"
.br
.RI "\fIget a cell in the map \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBGenerateMaze\fP & \fBgetInstance\fP ()"
.br
.RI "\fIUsed to return the current instance\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBGenerateMaze\fP & \fBoperator=\fP (const \fBGenerateMaze\fP &)"
.br
.RI "\fIprivate = operator to unable it \fP"
.ti -1c
.RI "\fBGenerateMaze\fP (const \fBGenerateMaze\fP &)"
.br
.RI "\fIprivate copy constructor \fP"
.ti -1c
.RI "\fBGenerateMaze\fP ()"
.br
.RI "\fI\fBGenerateMaze\fP's constructor private\&. \fP"
.ti -1c
.RI "\fB~GenerateMaze\fP ()"
.br
.RI "\fI\fBGenerateMaze\fP's destructor private\&. \fP"
.ti -1c
.RI "void \fBinit\fP (int width, int height)"
.br
.RI "\fIinit map for create \fP"
.ti -1c
.RI "void \fBinitRandom\fP (int width, int height)"
.br
.RI "\fIinit map for createRandom \fP"
.ti -1c
.RI "int \fBrandomDirection\fP () const "
.br
.RI "\fIrandom in 0 - 3 (included) \fP"
.ti -1c
.RI "bool \fBsetWall\fP (int x, int y, int xModifier, int yModifier)"
.br
.RI "\fIintern function for createRandom \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBm_width\fP"
.br
.ti -1c
.RI "int \fBm_height\fP"
.br
.ti -1c
.RI "char * \fBm_maze\fP"
.br
.ti -1c
.RI "std::vector< std::pair< int, int > > \fBm_emptyCell\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static \fBGenerateMaze\fP \fBm_instance\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Generate maze (char *) 

Singleton to create a specific map 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GenerateMaze::GenerateMaze (const \fBGenerateMaze\fP &)\fC [inline]\fP, \fC [private]\fP"

.PP
private copy constructor Unused 
.SS "GenerateMaze::GenerateMaze ()\fC [private]\fP"

.PP
\fBGenerateMaze\fP's constructor private\&. Used to create a static instance (singleton) We will set default value for width, height and maze\&. 
.SS "GenerateMaze::~GenerateMaze ()\fC [private]\fP"

.PP
\fBGenerateMaze\fP's destructor private\&. Used to destroy instance\&. It will delete the maze\&. 
.SH "Member Function Documentation"
.PP 
.SS "void GenerateMaze::create (int width, int height)"

.PP
Generate normal map (like bomberman) It will call the init private function and generate a map
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP the maze's width 
.br
\fIheigth\fP the maze's height 
.RE
.PP

.SS "void GenerateMaze::createRandom (int width, int height)"

.PP
Generate random map\&. It will call create random map with specific width / height
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP the maze's width 
.br
\fIheight\fP the maze's height 
.RE
.PP

.SS "int GenerateMaze::getCell (int x, int y)"

.PP
get a cell in the map Get a cell with specific x and y position
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the x's position in map we want to get 
.br
\fIy\fP the y's position in map we want to get 
.RE
.PP
\fBReturns:\fP
.RS 4
Get the cell's id like wall, empty etc 
.RE
.PP

.SS "std::vector<std::pair <int, int> >& GenerateMaze::getEmptyCells ()"

.PP
get empty cells in map Get the empty cells in the map generated
.PP
\fBReturns:\fP
.RS 4
Cells' vector with empty's position 
.RE
.PP

.SS "static \fBGenerateMaze\fP& GenerateMaze::getInstance ()\fC [static]\fP"

.PP
Used to return the current instance\&. Our class is a singleton so we need a function to use it
.PP
\fBReturns:\fP
.RS 4
the current class's instance 
.RE
.PP

.SS "char* GenerateMaze::getMap () const"

.PP
get the map generated Get the map generated by create or createRandom Or null if no map generated
.PP
\fBReturns:\fP
.RS 4
Current map generated 
.RE
.PP

.SS "void GenerateMaze::init (int width, int height)\fC [private]\fP"

.PP
init map for create Init map with specific pattern (like bomberman)
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP maze's width size 
.br
\fIheight\fP maze's height size 
.RE
.PP

.SS "void GenerateMaze::initRandom (int width, int height)\fC [private]\fP"

.PP
init map for createRandom init map for createRandom with ID_WALL or ID_BLOCK
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP maze's width size 
.br
\fIheight\fP maze's height size 
.RE
.PP

.SS "\fBGenerateMaze\fP& GenerateMaze::operator= (const \fBGenerateMaze\fP &)\fC [private]\fP"

.PP
private = operator to unable it Unused and undefined 
.SS "int GenerateMaze::randomDirection () const\fC [private]\fP"

.PP
random in 0 - 3 (included) It will generate with random_device, mt19937 and uniform_int_distribution a number in 0 - 3 (included)
.PP
\fBReturns:\fP
.RS 4
A number in 0 - 3 (included) 
.RE
.PP

.SS "void GenerateMaze::setCell (int x, int y, int id_cell)"

.PP
set a cell in the map it will a set a cell in the map with an id
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the x's position in map we want to set 
.br
\fIy\fP the y's position in map we want to set 
.br
\fIid_cell\fP set the cell with specific id (like wall etc) 
.RE
.PP

.SS "bool GenerateMaze::setWall (int x, int y, int xModifier, int yModifier)\fC [private]\fP"

.PP
intern function for createRandom Check if the new position is a valid one in createRandom's algo
.PP
current x's position in the map  current y's position in the map  modifier we want to apply on our current position (like 1, -1, \&.\&.\&.)  modifier we want to apply on our current position (like 1, -1, \&.\&.\&.) 
.PP
\fBReturns:\fP
.RS 4
true if the new position isn't valid else false 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "std::vector<std::pair <int, int> > GenerateMaze::m_emptyCell\fC [private]\fP"
used to increase cell research 
.SS "int GenerateMaze::m_height\fC [private]\fP"
maze's height we will generate 
.SS "\fBGenerateMaze\fP GenerateMaze::m_instance\fC [static]\fP, \fC [private]\fP"
used in singleton 
.SS "char* GenerateMaze::m_maze\fC [private]\fP"
the maze generated will be hold here 
.SS "int GenerateMaze::m_width\fC [private]\fP"
maze's width we will generate 

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
