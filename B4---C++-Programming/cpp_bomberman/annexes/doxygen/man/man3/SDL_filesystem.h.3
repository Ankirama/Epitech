.TH "lib/gdl/includes/SDL_filesystem.h" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gdl/includes/SDL_filesystem.h \- Include file for filesystem SDL API functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "DECLSPEC char *SDLCALL \fBSDL_GetBasePath\fP (\fBvoid\fP)"
.br
.RI "\fIGet the path where the application resides\&. \fP"
.ti -1c
.RI "DECLSPEC char *SDLCALL \fBSDL_GetPrefPath\fP (const char *org, const char *app)"
.br
.RI "\fIGet the user-and-app-specific path where files can be written\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Include file for filesystem SDL API functions\&. 


.SH "Function Documentation"
.PP 
.SS "DECLSPEC char* SDLCALL SDL_GetBasePath (\fBvoid\fP)"

.PP
Get the path where the application resides\&. Get the 'base path'\&. This is the directory where the application was run from, which is probably the installation directory, and may or may not be the process's current working directory\&.
.PP
This returns an absolute path in UTF-8 encoding, and is guaranteed to end with a path separator ('\\' on Windows, '/' most other places)\&.
.PP
The pointer returned by this function is owned by you\&. Please call SDL_free() on the pointer when you are done with it, or it will be a memory leak\&. This is not necessarily a fast call, though, so you should call this once near startup and save the string if you need it\&.
.PP
Some platforms can't determine the application's path, and on other platforms, this might be meaningless\&. In such cases, this function will return NULL\&.
.PP
\fBReturns:\fP
.RS 4
String of base dir in UTF-8 encoding, or NULL on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_GetPrefPath\fP 
.RE
.PP

.SS "DECLSPEC char* SDLCALL SDL_GetPrefPath (const char * org, const char * app)"

.PP
Get the user-and-app-specific path where files can be written\&. Get the 'pref dir'\&. This is meant to be where users can write personal files (preferences and save games, etc) that are specific to your application\&. This directory is unique per user, per application\&.
.PP
This function will decide the appropriate location in the native filesystem, create the directory if necessary, and return a string of the absolute path to the directory in UTF-8 encoding\&.
.PP
On Windows, the string might look like: 'C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\'
.PP
On Linux, the string might look like: '/home/bob/\&.local/share/My Program Name/'
.PP
On Mac OS X, the string might look like: '/Users/bob/Library/Application Support/My Program Name/'
.PP
(etc\&.)
.PP
You specify the name of your organization (if it's not a real organization, your name or an Internet domain you own might do) and the name of your application\&. These should be untranslated proper names\&.
.PP
Both the org and app strings may become part of a directory name, so please follow these rules:
.PP
.IP "\(bu" 2
Try to use the same org string (including case-sensitivity) for all your applications that use this function\&.
.IP "\(bu" 2
Always use a unique app string for each one, and make sure it never changes for an app once you've decided on it\&.
.IP "\(bu" 2
Unicode characters are legal, as long as it's UTF-8 encoded, but\&.\&.\&.
.IP "\(bu" 2
\&.\&.\&.only use letters, numbers, and spaces\&. Avoid punctuation like 'Game Name 2: Bad Guy's Revenge!' \&.\&.\&. 'Game Name 2' is sufficient\&.
.PP
.PP
This returns an absolute path in UTF-8 encoding, and is guaranteed to end with a path separator ('\\' on Windows, '/' most other places)\&.
.PP
The pointer returned by this function is owned by you\&. Please call SDL_free() on the pointer when you are done with it, or it will be a memory leak\&. This is not necessarily a fast call, though, so you should call this once near startup and save the string if you need it\&.
.PP
You should assume the path returned by this function is the only safe place to write files (and that \fBSDL_GetBasePath()\fP, while it might be writable, or even the parent of the returned path, aren't where you should be writing things)\&.
.PP
Some platforms can't determine the pref path, and on other platforms, this might be meaningless\&. In such cases, this function will return NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIorg\fP The name of your organization\&. 
.br
\fIapp\fP The name of your application\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
UTF-8 string of user dir in platform-dependent notation\&. NULL if there's a problem (creating directory failed, etc)\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_GetBasePath\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
