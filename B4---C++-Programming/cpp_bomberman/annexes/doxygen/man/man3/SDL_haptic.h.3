.TH "lib/gdl/includes/SDL_haptic.h" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gdl/includes/SDL_haptic.h \- The SDL Haptic subsystem allows you to control haptic (force feedback) devices\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'SDL_joystick\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBSDL_HapticDirection\fP"
.br
.RI "\fIStructure that represents a haptic direction\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticConstant\fP"
.br
.RI "\fIA structure containing a template for a Constant effect\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticPeriodic\fP"
.br
.RI "\fIA structure containing a template for a Periodic effect\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticCondition\fP"
.br
.RI "\fIA structure containing a template for a Condition effect\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticRamp\fP"
.br
.RI "\fIA structure containing a template for a Ramp effect\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticLeftRight\fP"
.br
.RI "\fIA structure containing a template for a Left/Right effect\&. \fP"
.ti -1c
.RI "struct \fBSDL_HapticCustom\fP"
.br
.RI "\fIA structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. \fP"
.ti -1c
.RI "union \fBSDL_HapticEffect\fP"
.br
.RI "\fIThe generic template for any haptic effect\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSDL_HAPTIC_GAIN\fP   (1<<12)"
.br
.RI "\fIDevice can set global gain\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_AUTOCENTER\fP   (1<<13)"
.br
.RI "\fIDevice can set autocenter\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_STATUS\fP   (1<<14)"
.br
.RI "\fIDevice can be queried for effect status\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_PAUSE\fP   (1<<15)"
.br
.RI "\fIDevice can be paused\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_INFINITY\fP   4294967295U"
.br
.RI "\fIUsed to play a device an infinite number of times\&. \fP"
.in -1c
.PP
.RI "\fBHaptic effects\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDL_HAPTIC_CONSTANT\fP   (1<<0)"
.br
.RI "\fIConstant effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_SINE\fP   (1<<1)"
.br
.RI "\fISine wave effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_LEFTRIGHT\fP   (1<<2)"
.br
.RI "\fILeft/Right effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_TRIANGLE\fP   (1<<3)"
.br
.RI "\fITriangle wave effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_SAWTOOTHUP\fP   (1<<4)"
.br
.RI "\fISawtoothup wave effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_SAWTOOTHDOWN\fP   (1<<5)"
.br
.RI "\fISawtoothdown wave effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_RAMP\fP   (1<<6)"
.br
.RI "\fIRamp effect supported\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_SPRING\fP   (1<<7)"
.br
.RI "\fISpring effect supported - uses axes position\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_DAMPER\fP   (1<<8)"
.br
.RI "\fIDamper effect supported - uses axes velocity\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_INERTIA\fP   (1<<9)"
.br
.RI "\fIInertia effect supported - uses axes acceleration\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_FRICTION\fP   (1<<10)"
.br
.RI "\fIFriction effect supported - uses axes movement\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_CUSTOM\fP   (1<<11)"
.br
.RI "\fICustom effect is supported\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBDirection encodings\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fBSDL_HAPTIC_POLAR\fP   0"
.br
.RI "\fIUses polar coordinates for the direction\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_CARTESIAN\fP   1"
.br
.RI "\fIUses cartesian coordinates for the direction\&. \fP"
.ti -1c
.RI "#define \fBSDL_HAPTIC_SPHERICAL\fP   2"
.br
.RI "\fIUses spherical coordinates for the direction\&. \fP"
.in -1c
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _SDL_Haptic \fBSDL_Haptic\fP"
.br
.RI "\fIThe haptic structure used to identify an SDL haptic\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticDirection\fP \fBSDL_HapticDirection\fP"
.br
.RI "\fIStructure that represents a haptic direction\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticConstant\fP \fBSDL_HapticConstant\fP"
.br
.RI "\fIA structure containing a template for a Constant effect\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticPeriodic\fP \fBSDL_HapticPeriodic\fP"
.br
.RI "\fIA structure containing a template for a Periodic effect\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticCondition\fP \fBSDL_HapticCondition\fP"
.br
.RI "\fIA structure containing a template for a Condition effect\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticRamp\fP \fBSDL_HapticRamp\fP"
.br
.RI "\fIA structure containing a template for a Ramp effect\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticLeftRight\fP \fBSDL_HapticLeftRight\fP"
.br
.RI "\fIA structure containing a template for a Left/Right effect\&. \fP"
.ti -1c
.RI "typedef struct \fBSDL_HapticCustom\fP \fBSDL_HapticCustom\fP"
.br
.RI "\fIA structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. \fP"
.ti -1c
.RI "typedef union \fBSDL_HapticEffect\fP \fBSDL_HapticEffect\fP"
.br
.RI "\fIThe generic template for any haptic effect\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_NumHaptics\fP (\fBvoid\fP)"
.br
.RI "\fICount the number of haptic devices attached to the system\&. \fP"
.ti -1c
.RI "DECLSPEC const char *SDLCALL \fBSDL_HapticName\fP (\fBint\fP device_index)"
.br
.RI "\fIGet the implementation dependent name of a Haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBSDL_Haptic\fP *SDLCALL \fBSDL_HapticOpen\fP (\fBint\fP device_index)"
.br
.RI "\fIOpens a Haptic device for usage\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticOpened\fP (\fBint\fP device_index)"
.br
.RI "\fIChecks if the haptic device at index has been opened\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticIndex\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIGets the index of a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_MouseIsHaptic\fP (\fBvoid\fP)"
.br
.RI "\fIGets whether or not the current mouse has haptic capabilities\&. \fP"
.ti -1c
.RI "DECLSPEC \fBSDL_Haptic\fP *SDLCALL \fBSDL_HapticOpenFromMouse\fP (\fBvoid\fP)"
.br
.RI "\fITries to open a haptic device from the current mouse\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_JoystickIsHaptic\fP (SDL_Joystick *joystick)"
.br
.RI "\fIChecks to see if a joystick has haptic features\&. \fP"
.ti -1c
.RI "DECLSPEC \fBSDL_Haptic\fP *SDLCALL \fBSDL_HapticOpenFromJoystick\fP (SDL_Joystick *joystick)"
.br
.RI "\fIOpens a Haptic device for usage from a Joystick device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_HapticClose\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fICloses a Haptic device previously opened with \fBSDL_HapticOpen()\fP\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticNumEffects\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIReturns the number of effects a haptic device can store\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticNumEffectsPlaying\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIReturns the number of effects a haptic device can play at the same time\&. \fP"
.ti -1c
.RI "DECLSPEC unsigned \fBint\fP SDLCALL \fBSDL_HapticQuery\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIGets the haptic devices supported features in bitwise matter\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticNumAxes\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIGets the number of haptic axes the device has\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticEffectSupported\fP (\fBSDL_Haptic\fP *haptic, \fBSDL_HapticEffect\fP *effect)"
.br
.RI "\fIChecks to see if effect is supported by haptic\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticNewEffect\fP (\fBSDL_Haptic\fP *haptic, \fBSDL_HapticEffect\fP *effect)"
.br
.RI "\fICreates a new haptic effect on the device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticUpdateEffect\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP effect, \fBSDL_HapticEffect\fP *data)"
.br
.RI "\fIUpdates the properties of an effect\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticRunEffect\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP effect, \fBUint32\fP iterations)"
.br
.RI "\fIRuns the haptic effect on its associated haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticStopEffect\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP effect)"
.br
.RI "\fIStops the haptic effect on its associated haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_HapticDestroyEffect\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP effect)"
.br
.RI "\fIDestroys a haptic effect on the device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticGetEffectStatus\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP effect)"
.br
.RI "\fIGets the status of the current effect on the haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticSetGain\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP gain)"
.br
.RI "\fISets the global gain of the device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticSetAutocenter\fP (\fBSDL_Haptic\fP *haptic, \fBint\fP autocenter)"
.br
.RI "\fISets the global autocenter of the device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticPause\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIPauses a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticUnpause\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIUnpauses a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticStopAll\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIStops all the currently playing effects on a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticRumbleSupported\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIChecks to see if rumble is supported on a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticRumbleInit\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIInitializes the haptic device for simple rumble playback\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticRumblePlay\fP (\fBSDL_Haptic\fP *haptic, float strength, \fBUint32\fP length)"
.br
.RI "\fIRuns simple rumble on a haptic device\&. \fP"
.ti -1c
.RI "DECLSPEC \fBint\fP SDLCALL \fBSDL_HapticRumbleStop\fP (\fBSDL_Haptic\fP *haptic)"
.br
.RI "\fIStops the simple rumble on a haptic device\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The SDL Haptic subsystem allows you to control haptic (force feedback) devices\&. 

The basic usage is as follows:
.IP "\(bu" 2
Initialize the Subsystem (::SDL_INIT_HAPTIC)\&.
.IP "\(bu" 2
Open a Haptic Device\&.
.IP "  \(bu" 4
\fBSDL_HapticOpen()\fP to open from index\&.
.IP "  \(bu" 4
\fBSDL_HapticOpenFromJoystick()\fP to open from an existing joystick\&.
.PP

.IP "\(bu" 2
Create an effect (\fBSDL_HapticEffect\fP)\&.
.IP "\(bu" 2
Upload the effect with \fBSDL_HapticNewEffect()\fP\&.
.IP "\(bu" 2
Run the effect with \fBSDL_HapticRunEffect()\fP\&.
.IP "\(bu" 2
(optional) Free the effect with \fBSDL_HapticDestroyEffect()\fP\&.
.IP "\(bu" 2
Close the haptic device with \fBSDL_HapticClose()\fP\&.
.PP
.PP
\fBSimple rumble example:\fP
.RS 4

.PP
.nf
SDL_Haptic *haptic;

// Open the device
haptic = SDL_HapticOpen( 0 );
if (haptic == NULL)
   return -1;

// Initialize simple rumble
if (SDL_HapticRumbleInit( haptic ) != 0)
   return -1;

// Play effect at 50% strength for 2 seconds
if (SDL_HapticRumblePlay( haptic, 0\&.5, 2000 ) != 0)
   return -1;
SDL_Delay( 2000 );

// Clean up
SDL_HapticClose( haptic );

.fi
.PP
.RE
.PP
\fBComplete example:\fP
.RS 4

.PP
.nf
int test_haptic( SDL_Joystick * joystick ) {
   SDL_Haptic *haptic;
   SDL_HapticEffect effect;
   int effect_id;

   // Open the device
   haptic = SDL_HapticOpenFromJoystick( joystick );
   if (haptic == NULL) return -1; // Most likely joystick isn't haptic

   // See if it can do sine waves
   if ((SDL_HapticQuery(haptic) & SDL_HAPTIC_SINE)==0) {
      SDL_HapticClose(haptic); // No sine effect
      return -1;
   }

   // Create the effect
   memset( &effect, 0, sizeof(SDL_HapticEffect) ); // 0 is safe default
   effect\&.type = SDL_HAPTIC_SINE;
   effect\&.periodic\&.direction\&.type = SDL_HAPTIC_POLAR; // Polar coordinates
   effect\&.periodic\&.direction\&.dir[0] = 18000; // Force comes from south
   effect\&.periodic\&.period = 1000; // 1000 ms
   effect\&.periodic\&.magnitude = 20000; // 20000/32767 strength
   effect\&.periodic\&.length = 5000; // 5 seconds long
   effect\&.periodic\&.attack_length = 1000; // Takes 1 second to get max strength
   effect\&.periodic\&.fade_length = 1000; // Takes 1 second to fade away

   // Upload the effect
   effect_id = SDL_HapticNewEffect( haptic, &effect );

   // Test the effect
   SDL_HapticRunEffect( haptic, effect_id, 1 );
   SDL_Delay( 5000); // Wait for the effect to finish

   // We destroy the effect, although closing the device also does this
   SDL_HapticDestroyEffect( haptic, effect_id );

   // Close the device
   SDL_HapticClose(haptic);

   return 0; // Success
}

.fi
.PP
.RE
.PP
You can also find out more information on my blog: http://bobbens.dyndns.org/journal/2010/sdl_haptic/
.PP
\fBAuthor:\fP
.RS 4
Edgar Simo Serra 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define SDL_HAPTIC_AUTOCENTER   (1<<13)"

.PP
Device can set autocenter\&. Device supports setting autocenter\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticSetAutocenter\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CARTESIAN   1"

.PP
Uses cartesian coordinates for the direction\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CONSTANT   (1<<0)"

.PP
Constant effect supported\&. Constant haptic effect\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_CUSTOM   (1<<11)"

.PP
Custom effect is supported\&. User defined custom haptic effect\&. 
.SS "#define SDL_HAPTIC_DAMPER   (1<<8)"

.PP
Damper effect supported - uses axes velocity\&. Condition haptic effect that simulates dampening\&. Effect is based on the axes velocity\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_FRICTION   (1<<10)"

.PP
Friction effect supported - uses axes movement\&. Condition haptic effect that simulates friction\&. Effect is based on the axes movement\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_GAIN   (1<<12)"

.PP
Device can set global gain\&. Device supports setting the global gain\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticSetGain\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_INERTIA   (1<<9)"

.PP
Inertia effect supported - uses axes acceleration\&. Condition haptic effect that simulates inertia\&. Effect is based on the axes acceleration\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_INFINITY   4294967295U"

.PP
Used to play a device an infinite number of times\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRunEffect\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_LEFTRIGHT   (1<<2)"

.PP
Left/Right effect supported\&. Haptic effect for direct control over high/low frequency motors\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticLeftRight\fP 
.RE
.PP
\fBWarning:\fP
.RS 4
this value was SDL_HAPTIC_SQUARE right before 2\&.0\&.0 shipped\&. Sorry, we ran out of bits, and this is important for XInput devices\&. 
.RE
.PP

.SS "#define SDL_HAPTIC_PAUSE   (1<<15)"

.PP
Device can be paused\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPause\fP 
.PP
\fBSDL_HapticUnpause\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_POLAR   0"

.PP
Uses polar coordinates for the direction\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_RAMP   (1<<6)"

.PP
Ramp effect supported\&. Ramp haptic effect\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRamp\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SAWTOOTHDOWN   (1<<5)"

.PP
Sawtoothdown wave effect supported\&. Periodic haptic effect that simulates saw tooth down waves\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SAWTOOTHUP   (1<<4)"

.PP
Sawtoothup wave effect supported\&. Periodic haptic effect that simulates saw tooth up waves\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SINE   (1<<1)"

.PP
Sine wave effect supported\&. Periodic haptic effect that simulates sine waves\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SPHERICAL   2"

.PP
Uses spherical coordinates for the direction\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_SPRING   (1<<7)"

.PP
Spring effect supported - uses axes position\&. Condition haptic effect that simulates a spring\&. Effect is based on the axes position\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticCondition\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_STATUS   (1<<14)"

.PP
Device can be queried for effect status\&. Device can be queried for effect status\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticGetEffectStatus\fP 
.RE
.PP

.SS "#define SDL_HAPTIC_TRIANGLE   (1<<3)"

.PP
Triangle wave effect supported\&. Periodic haptic effect that simulates triangular waves\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPeriodic\fP 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "\fBSDL_Haptic\fP"

.PP
The haptic structure used to identify an SDL haptic\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticOpenFromJoystick\fP 
.PP
\fBSDL_HapticClose\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticCondition\fP  \fBSDL_HapticCondition\fP"

.PP
A structure containing a template for a Condition effect\&. The struct handles the following effects:
.IP "\(bu" 2
\fBSDL_HAPTIC_SPRING\fP: Effect based on axes position\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_DAMPER\fP: Effect based on axes velocity\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_INERTIA\fP: Effect based on axes acceleration\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_FRICTION\fP: Effect based on axes movement\&.
.PP
.PP
Direction is handled by condition internals instead of a direction member\&. The condition effect specific members have three parameters\&. The first refers to the X axis, the second refers to the Y axis and the third refers to the Z axis\&. The right terms refer to the positive side of the axis and the left terms refer to the negative side of the axis\&. Please refer to the \fBSDL_HapticDirection\fP diagram for which side is positive and which is negative\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticDirection\fP 
.PP
\fBSDL_HAPTIC_SPRING\fP 
.PP
\fBSDL_HAPTIC_DAMPER\fP 
.PP
\fBSDL_HAPTIC_INERTIA\fP 
.PP
\fBSDL_HAPTIC_FRICTION\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticConstant\fP  \fBSDL_HapticConstant\fP"

.PP
A structure containing a template for a Constant effect\&. The struct is exclusive to the \fBSDL_HAPTIC_CONSTANT\fP effect\&.
.PP
A constant effect applies a constant force in the specified direction to the joystick\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_CONSTANT\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticCustom\fP  \fBSDL_HapticCustom\fP"

.PP
A structure containing a template for the \fBSDL_HAPTIC_CUSTOM\fP effect\&. A custom force feedback effect is much like a periodic effect, where the application can define its exact shape\&. You will have to allocate the data yourself\&. Data should consist of channels * samples Uint16 samples\&.
.PP
If channels is one, the effect is rotated using the defined direction\&. Otherwise it uses the samples in data for the different axes\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_CUSTOM\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticDirection\fP  \fBSDL_HapticDirection\fP"

.PP
Structure that represents a haptic direction\&. Directions can be specified by:
.IP "\(bu" 2
\fBSDL_HAPTIC_POLAR\fP : Specified by polar coordinates\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_CARTESIAN\fP : Specified by cartesian coordinates\&.
.IP "\(bu" 2
\fBSDL_HAPTIC_SPHERICAL\fP : Specified by spherical coordinates\&.
.PP
.PP
Cardinal directions of the haptic device are relative to the positioning of the device\&. North is considered to be away from the user\&.
.PP
The following diagram represents the cardinal directions: 
.PP
.nf
             .--.
             |__| .-------.
             |=.| |.-----.|
             |--| ||     ||
             |  | |'-----'|
             |__|~')_____('
               [ COMPUTER ]


                 North (0,-1)
                     ^
                     |
                     |
(1,0)  West <----[ HAPTIC ]----> East (-1,0)
                     |
                     |
                     v
                  South (0,1)


                  [ USER ]
                    \|||/
                    (o o)
              ---ooO-(_)-Ooo---

.fi
.PP
.PP
If type is \fBSDL_HAPTIC_POLAR\fP, direction is encoded by hundredths of a degree starting north and turning clockwise\&. \fBSDL_HAPTIC_POLAR\fP only uses the first \fCdir\fP parameter\&. The cardinal directions would be:
.IP "\(bu" 2
North: 0 (0 degrees)
.IP "\(bu" 2
East: 9000 (90 degrees)
.IP "\(bu" 2
South: 18000 (180 degrees)
.IP "\(bu" 2
West: 27000 (270 degrees)
.PP
.PP
If type is \fBSDL_HAPTIC_CARTESIAN\fP, direction is encoded by three positions (X axis, Y axis and Z axis (with 3 axes))\&. \fBSDL_HAPTIC_CARTESIAN\fP uses the first three \fCdir\fP parameters\&. The cardinal directions would be:
.IP "\(bu" 2
North: 0,-1, 0
.IP "\(bu" 2
East: -1, 0, 0
.IP "\(bu" 2
South: 0, 1, 0
.IP "\(bu" 2
West: 1, 0, 0
.PP
.PP
The Z axis represents the height of the effect if supported, otherwise it's unused\&. In cartesian encoding (1, 2) would be the same as (2, 4), you can use any multiple you want, only the direction matters\&.
.PP
If type is \fBSDL_HAPTIC_SPHERICAL\fP, direction is encoded by two rotations\&. The first two \fCdir\fP parameters are used\&. The \fCdir\fP parameters are as follows (all values are in hundredths of degrees):
.IP "\(bu" 2
Degrees from (1, 0) rotated towards (0, 1)\&.
.IP "\(bu" 2
Degrees towards (0, 0, 1) (device needs at least 3 axes)\&.
.PP
.PP
Example of force coming from the south with all encodings (force coming from the south means the user will have to pull the stick to counteract): 
.PP
.nf
1 SDL_HapticDirection direction;
2 
3 // Cartesian directions
4 direction\&.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding\&.
5 direction\&.dir[0] = 0; // X position
6 direction\&.dir[1] = 1; // Y position
7 // Assuming the device has 2 axes, we don't need to specify third parameter\&.
8 
9 // Polar directions
10 direction\&.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding\&.
11 direction\&.dir[0] = 18000; // Polar only uses first parameter
12 
13 // Spherical coordinates
14 direction\&.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
15 direction\&.dir[0] = 9000; // Since we only have two axes we don't need more parameters\&.

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_POLAR\fP 
.PP
\fBSDL_HAPTIC_CARTESIAN\fP 
.PP
\fBSDL_HAPTIC_SPHERICAL\fP 
.PP
\fBSDL_HapticEffect\fP 
.PP
\fBSDL_HapticNumAxes\fP 
.RE
.PP

.SS "typedef union \fBSDL_HapticEffect\fP  \fBSDL_HapticEffect\fP"

.PP
The generic template for any haptic effect\&. All values max at 32767 (0x7FFF)\&. Signed values also can be negative\&. Time values unless specified otherwise are in milliseconds\&.
.PP
You can also pass \fBSDL_HAPTIC_INFINITY\fP to length instead of a 0-32767 value\&. Neither delay, interval, attack_length nor fade_length support \fBSDL_HAPTIC_INFINITY\fP\&. Fade will also not be used since effect never ends\&.
.PP
Additionally, the \fBSDL_HAPTIC_RAMP\fP effect does not support a duration of \fBSDL_HAPTIC_INFINITY\fP\&.
.PP
\fBButton\fP triggers may not be supported on all devices, it is advised to not use them if possible\&. Buttons start at index 1 instead of index 0 like the joystick\&.
.PP
If both attack_length and fade_level are 0, the envelope is not used, otherwise both values are used\&.
.PP
Common parts: 
.PP
.nf
1 // Replay - All effects have this
2 Uint32 length;        // Duration of effect (ms)\&.
3 Uint16 delay;         // Delay before starting effect\&.
4 
5 // Trigger - All effects have this
6 Uint16 button;        // Button that triggers effect\&.
7 Uint16 interval;      // How soon before effect can be triggered again\&.
8 
9 // Envelope - All effects except condition effects have this
10 Uint16 attack_length; // Duration of the attack (ms)\&.
11 Uint16 attack_level;  // Level at the start of the attack\&.
12 Uint16 fade_length;   // Duration of the fade out (ms)\&.
13 Uint16 fade_level;    // Level at the end of the fade\&.

.fi
.PP
.PP
Here we have an example of a constant effect evolution in time: 
.PP
.nf
Strength
^
|
|    effect level -->  _________________
|                     /                 \
|                    /                   \
|                   /                     \
|                  /                       \
| attack_level --> |                        \
|                  |                        |  <---  fade_level
|
+--------------------------------------------------> Time
                   [--]                 [---]
                   attack_length        fade_length

[------------------][-----------------------]
delay               length

.fi
.PP
.PP
Note either the attack_level or the fade_level may be above the actual effect level\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticConstant\fP 
.PP
\fBSDL_HapticPeriodic\fP 
.PP
\fBSDL_HapticCondition\fP 
.PP
\fBSDL_HapticRamp\fP 
.PP
\fBSDL_HapticLeftRight\fP 
.PP
\fBSDL_HapticCustom\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticLeftRight\fP  \fBSDL_HapticLeftRight\fP"

.PP
A structure containing a template for a Left/Right effect\&. This struct is exclusively for the \fBSDL_HAPTIC_LEFTRIGHT\fP effect\&.
.PP
The Left/Right effect is used to explicitly control the large and small motors, commonly found in modern game controllers\&. One motor is high frequency, the other is low frequency\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_LEFTRIGHT\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticPeriodic\fP  \fBSDL_HapticPeriodic\fP"

.PP
A structure containing a template for a Periodic effect\&. The struct handles the following effects:
.IP "\(bu" 2
\fBSDL_HAPTIC_SINE\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_LEFTRIGHT\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_TRIANGLE\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_SAWTOOTHUP\fP
.IP "\(bu" 2
\fBSDL_HAPTIC_SAWTOOTHDOWN\fP
.PP
.PP
A periodic effect consists in a wave-shaped effect that repeats itself over time\&. The type determines the shape of the wave and the parameters determine the dimensions of the wave\&.
.PP
Phase is given by hundredth of a cycle meaning that giving the phase a value of 9000 will displace it 25% of its period\&. Here are sample values:
.IP "\(bu" 2
0: No phase displacement\&.
.IP "\(bu" 2
9000: Displaced 25% of its period\&.
.IP "\(bu" 2
18000: Displaced 50% of its period\&.
.IP "\(bu" 2
27000: Displaced 75% of its period\&.
.IP "\(bu" 2
36000: Displaced 100% of its period, same as 0, but 0 is preferred\&.
.PP
.PP
Examples: 
.PP
.nf
SDL_HAPTIC_SINE
  __      __      __      __
 /  \    /  \    /  \    /
/    \__/    \__/    \__/

SDL_HAPTIC_SQUARE
 __    __    __    __    __
|  |  |  |  |  |  |  |  |  |
|  |__|  |__|  |__|  |__|  |

SDL_HAPTIC_TRIANGLE
  /\    /\    /\    /\    /\
 /  \  /  \  /  \  /  \  /
/    \/    \/    \/    \/

SDL_HAPTIC_SAWTOOTHUP
  /|  /|  /|  /|  /|  /|  /|
 / | / | / | / | / | / | / |
/  |/  |/  |/  |/  |/  |/  |

SDL_HAPTIC_SAWTOOTHDOWN
\  |\  |\  |\  |\  |\  |\  |
 \ | \ | \ | \ | \ | \ | \ |
  \|  \|  \|  \|  \|  \|  \|

.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_SINE\fP 
.PP
\fBSDL_HAPTIC_LEFTRIGHT\fP 
.PP
\fBSDL_HAPTIC_TRIANGLE\fP 
.PP
\fBSDL_HAPTIC_SAWTOOTHUP\fP 
.PP
\fBSDL_HAPTIC_SAWTOOTHDOWN\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SS "typedef struct \fBSDL_HapticRamp\fP  \fBSDL_HapticRamp\fP"

.PP
A structure containing a template for a Ramp effect\&. This struct is exclusively for the \fBSDL_HAPTIC_RAMP\fP effect\&.
.PP
The ramp effect starts at start strength and ends at end strength\&. It augments in linear fashion\&. If you use attack and fade with a ramp the effects get added to the ramp effect making the effect become quadratic instead of linear\&.
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HAPTIC_RAMP\fP 
.PP
\fBSDL_HapticEffect\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "DECLSPEC \fBvoid\fP SDLCALL SDL_HapticClose (\fBSDL_Haptic\fP * haptic)"

.PP
Closes a Haptic device previously opened with \fBSDL_HapticOpen()\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to close\&. 
.RE
.PP

.SS "DECLSPEC \fBvoid\fP SDLCALL SDL_HapticDestroyEffect (\fBSDL_Haptic\fP * haptic, \fBint\fP effect)"

.PP
Destroys a haptic effect on the device\&. This will stop the effect if it's running\&. Effects are automatically destroyed when the device is closed\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Device to destroy the effect on\&. 
.br
\fIeffect\fP Identifier of the effect to destroy\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticNewEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticEffectSupported (\fBSDL_Haptic\fP * haptic, \fBSDL_HapticEffect\fP * effect)"

.PP
Checks to see if effect is supported by haptic\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to check on\&. 
.br
\fIeffect\fP Effect to check to see if it is supported\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticQuery\fP 
.PP
\fBSDL_HapticNewEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticGetEffectStatus (\fBSDL_Haptic\fP * haptic, \fBint\fP effect)"

.PP
Gets the status of the current effect on the haptic device\&. Device must support the \fBSDL_HAPTIC_STATUS\fP feature\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to query the effect status on\&. 
.br
\fIeffect\fP Identifier of the effect to query its status\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if it isn't playing, 1 if it is playing or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticStopEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticIndex (\fBSDL_Haptic\fP * haptic)"

.PP
Gets the index of a haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to get the index of\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The index of the haptic device or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticOpened\fP 
.RE
.PP

.SS "DECLSPEC const char* SDLCALL SDL_HapticName (\fBint\fP device_index)"

.PP
Get the implementation dependent name of a Haptic device\&. This can be called before any joysticks are opened\&. If no name can be found, this function returns NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIdevice_index\fP Index of the device to get its name\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Name of the device or NULL on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_NumHaptics\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticNewEffect (\fBSDL_Haptic\fP * haptic, \fBSDL_HapticEffect\fP * effect)"

.PP
Creates a new haptic effect on the device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to create the effect on\&. 
.br
\fIeffect\fP Properties of the effect to create\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The id of the effect on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticUpdateEffect\fP 
.PP
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticDestroyEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticNumAxes (\fBSDL_Haptic\fP * haptic)"

.PP
Gets the number of haptic axes the device has\&. 
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticDirection\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticNumEffects (\fBSDL_Haptic\fP * haptic)"

.PP
Returns the number of effects a haptic device can store\&. On some platforms this isn't fully supported, and therefore is an approximation\&. Always check to see if your created effect was actually created and do not rely solely on \fBSDL_HapticNumEffects()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP The haptic device to query effect max\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of effects the haptic device can store or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticNumEffectsPlaying\fP 
.PP
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticNumEffectsPlaying (\fBSDL_Haptic\fP * haptic)"

.PP
Returns the number of effects a haptic device can play at the same time\&. This is not supported on all platforms, but will always return a value\&. Added here for the sake of completeness\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP The haptic device to query maximum playing effects\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of effects the haptic device can play at the same time or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticNumEffects\fP 
.PP
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "DECLSPEC \fBSDL_Haptic\fP* SDLCALL SDL_HapticOpen (\fBint\fP device_index)"

.PP
Opens a Haptic device for usage\&. The index passed as an argument refers to the N'th Haptic device on this system\&.
.PP
When opening a haptic device, its gain will be set to maximum and autocenter will be disabled\&. To modify these values use \fBSDL_HapticSetGain()\fP and \fBSDL_HapticSetAutocenter()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIdevice_index\fP Index of the device to open\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Device identifier or NULL on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticIndex\fP 
.PP
\fBSDL_HapticOpenFromMouse\fP 
.PP
\fBSDL_HapticOpenFromJoystick\fP 
.PP
\fBSDL_HapticClose\fP 
.PP
\fBSDL_HapticSetGain\fP 
.PP
\fBSDL_HapticSetAutocenter\fP 
.PP
\fBSDL_HapticPause\fP 
.PP
\fBSDL_HapticStopAll\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticOpened (\fBint\fP device_index)"

.PP
Checks if the haptic device at index has been opened\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdevice_index\fP Index to check to see if it has been opened\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if it has been opened or 0 if it hasn't\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticIndex\fP 
.RE
.PP

.SS "DECLSPEC \fBSDL_Haptic\fP* SDLCALL SDL_HapticOpenFromJoystick (SDL_Joystick * joystick)"

.PP
Opens a Haptic device for usage from a Joystick device\&. You must still close the haptic device seperately\&. It will not be closed with the joystick\&.
.PP
When opening from a joystick you should first close the haptic device before closing the joystick device\&. If not, on some implementations the haptic device will also get unallocated and you'll be unable to use force feedback on that device\&.
.PP
\fBParameters:\fP
.RS 4
\fIjoystick\fP Joystick to create a haptic device from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A valid haptic device identifier on success or NULL on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticClose\fP 
.RE
.PP

.SS "DECLSPEC \fBSDL_Haptic\fP* SDLCALL SDL_HapticOpenFromMouse (\fBvoid\fP)"

.PP
Tries to open a haptic device from the current mouse\&. 
.PP
\fBReturns:\fP
.RS 4
The haptic device identifier or NULL on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_MouseIsHaptic\fP 
.PP
\fBSDL_HapticOpen\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticPause (\fBSDL_Haptic\fP * haptic)"

.PP
Pauses a haptic device\&. Device must support the \fBSDL_HAPTIC_PAUSE\fP feature\&. Call \fBSDL_HapticUnpause()\fP to resume playback\&.
.PP
Do not modify the effects nor add new ones while the device is paused\&. That can cause all sorts of weird errors\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to pause\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticUnpause\fP 
.RE
.PP

.SS "DECLSPEC unsigned \fBint\fP SDLCALL SDL_HapticQuery (\fBSDL_Haptic\fP * haptic)"

.PP
Gets the haptic devices supported features in bitwise matter\&. Example: 
.PP
.nf
1 if (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {
2     printf("We have constant haptic effect!");
3 }

.fi
.PP
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP The haptic device to query\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Haptic features in bitwise manner (OR'd)\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticNumEffects\fP 
.PP
\fBSDL_HapticEffectSupported\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticRumbleInit (\fBSDL_Haptic\fP * haptic)"

.PP
Initializes the haptic device for simple rumble playback\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to initialize for simple rumble playback\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpen\fP 
.PP
\fBSDL_HapticRumbleSupported\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticRumblePlay (\fBSDL_Haptic\fP * haptic, float strength, \fBUint32\fP length)"

.PP
Runs simple rumble on a haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to play rumble effect on\&. 
.br
\fIstrength\fP Strength of the rumble to play as a 0-1 float value\&. 
.br
\fIlength\fP Length of the rumble to play in milliseconds\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRumbleSupported\fP 
.PP
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticRumbleStop (\fBSDL_Haptic\fP * haptic)"

.PP
Stops the simple rumble on a haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic to stop the rumble on\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRumbleSupported\fP 
.PP
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticRumbleSupported (\fBSDL_Haptic\fP * haptic)"

.PP
Checks to see if rumble is supported on a haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to check to see if it supports rumble\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRumbleInit\fP 
.PP
\fBSDL_HapticRumblePlay\fP 
.PP
\fBSDL_HapticRumbleStop\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticRunEffect (\fBSDL_Haptic\fP * haptic, \fBint\fP effect, \fBUint32\fP iterations)"

.PP
Runs the haptic effect on its associated haptic device\&. If iterations are \fBSDL_HAPTIC_INFINITY\fP, it'll run the effect over and over repeating the envelope (attack and fade) every time\&. If you only want the effect to last forever, set \fBSDL_HAPTIC_INFINITY\fP in the effect's length parameter\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to run the effect on\&. 
.br
\fIeffect\fP Identifier of the haptic effect to run\&. 
.br
\fIiterations\fP Number of iterations to run the effect\&. Use \fBSDL_HAPTIC_INFINITY\fP for infinity\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticStopEffect\fP 
.PP
\fBSDL_HapticDestroyEffect\fP 
.PP
\fBSDL_HapticGetEffectStatus\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticSetAutocenter (\fBSDL_Haptic\fP * haptic, \fBint\fP autocenter)"

.PP
Sets the global autocenter of the device\&. Autocenter should be between 0 and 100\&. Setting it to 0 will disable autocentering\&.
.PP
Device must support the \fBSDL_HAPTIC_AUTOCENTER\fP feature\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to set autocentering on\&. 
.br
\fIautocenter\fP Value to set autocenter to, 0 disables autocentering\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticSetGain (\fBSDL_Haptic\fP * haptic, \fBint\fP gain)"

.PP
Sets the global gain of the device\&. Device must support the \fBSDL_HAPTIC_GAIN\fP feature\&.
.PP
The user may specify the maximum gain by setting the environment variable SDL_HAPTIC_GAIN_MAX which should be between 0 and 100\&. All calls to \fBSDL_HapticSetGain()\fP will scale linearly using SDL_HAPTIC_GAIN_MAX as the maximum\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to set the gain on\&. 
.br
\fIgain\fP Value to set the gain to, should be between 0 and 100\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticQuery\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticStopAll (\fBSDL_Haptic\fP * haptic)"

.PP
Stops all the currently playing effects on a haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to stop\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&. 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticStopEffect (\fBSDL_Haptic\fP * haptic, \fBint\fP effect)"

.PP
Stops the haptic effect on its associated haptic device\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to stop the effect on\&. 
.br
\fIeffect\fP Identifier of the effect to stop\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticDestroyEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticUnpause (\fBSDL_Haptic\fP * haptic)"

.PP
Unpauses a haptic device\&. Call to unpause after \fBSDL_HapticPause()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device to pause\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticPause\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_HapticUpdateEffect (\fBSDL_Haptic\fP * haptic, \fBint\fP effect, \fBSDL_HapticEffect\fP * data)"

.PP
Updates the properties of an effect\&. Can be used dynamically, although behaviour when dynamically changing direction may be strange\&. Specifically the effect may reupload itself and start playing from the start\&. You cannot change the type either when running \fBSDL_HapticUpdateEffect()\fP\&.
.PP
\fBParameters:\fP
.RS 4
\fIhaptic\fP Haptic device that has the effect\&. 
.br
\fIeffect\fP Effect to update\&. 
.br
\fIdata\fP New effect properties to use\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or -1 on error\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticNewEffect\fP 
.PP
\fBSDL_HapticRunEffect\fP 
.PP
\fBSDL_HapticDestroyEffect\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_JoystickIsHaptic (SDL_Joystick * joystick)"

.PP
Checks to see if a joystick has haptic features\&. 
.PP
\fBParameters:\fP
.RS 4
\fIjoystick\fP Joystick to test for haptic capabilities\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if the joystick is haptic, 0 if it isn't or -1 if an error ocurred\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpenFromJoystick\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_MouseIsHaptic (\fBvoid\fP)"

.PP
Gets whether or not the current mouse has haptic capabilities\&. 
.PP
\fBReturns:\fP
.RS 4
SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSDL_HapticOpenFromMouse\fP 
.RE
.PP

.SS "DECLSPEC \fBint\fP SDLCALL SDL_NumHaptics (\fBvoid\fP)"

.PP
Count the number of haptic devices attached to the system\&. 
.PP
\fBReturns:\fP
.RS 4
Number of haptic devices detected on the system\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
