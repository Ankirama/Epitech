.TH "lib/gdl/includes/SDL_hints.h" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gdl/includes/SDL_hints.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSDL_HINT_FRAMEBUFFER_ACCELERATION\fP   'SDL_FRAMEBUFFER_ACCELERATION'"
.br
.RI "\fIA variable controlling how 3D acceleration is used to accelerate the SDL screen surface\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_DRIVER\fP   'SDL_RENDER_DRIVER'"
.br
.RI "\fIA variable specifying which render driver to use\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_OPENGL_SHADERS\fP   'SDL_RENDER_OPENGL_SHADERS'"
.br
.RI "\fIA variable controlling whether the OpenGL render driver uses shaders if they are available\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_DIRECT3D_THREADSAFE\fP   'SDL_RENDER_DIRECT3D_THREADSAFE'"
.br
.RI "\fIA variable controlling whether the Direct3D device is initialized for thread-safe operations\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_DIRECT3D11_DEBUG\fP   'SDL_RENDER_DIRECT3D11_DEBUG'"
.br
.RI "\fIA variable controlling whether to enable Direct3D 11+'s Debug Layer\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_SCALE_QUALITY\fP   'SDL_RENDER_SCALE_QUALITY'"
.br
.RI "\fIA variable controlling the scaling quality\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_RENDER_VSYNC\fP   'SDL_RENDER_VSYNC'"
.br
.RI "\fIA variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_ALLOW_SCREENSAVER\fP   'SDL_VIDEO_ALLOW_SCREENSAVER'"
.br
.RI "\fIA variable controlling whether the screensaver is enabled\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_X11_XVIDMODE\fP   'SDL_VIDEO_X11_XVIDMODE'"
.br
.RI "\fIA variable controlling whether the X11 VidMode extension should be used\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_X11_XINERAMA\fP   'SDL_VIDEO_X11_XINERAMA'"
.br
.RI "\fIA variable controlling whether the X11 Xinerama extension should be used\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_X11_XRANDR\fP   'SDL_VIDEO_X11_XRANDR'"
.br
.RI "\fIA variable controlling whether the X11 XRandR extension should be used\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_GRAB_KEYBOARD\fP   'SDL_GRAB_KEYBOARD'"
.br
.RI "\fIA variable controlling whether grabbing input grabs the keyboard\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_MOUSE_RELATIVE_MODE_WARP\fP   'SDL_MOUSE_RELATIVE_MODE_WARP'"
.br
.RI "\fIA variable controlling whether relative mouse mode is implemented using mouse warping\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS\fP   'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS'"
.br
.RI "\fIMinimize your SDL_Window if it loses key focus when in fullscreen mode\&. Defaults to true\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_IDLE_TIMER_DISABLED\fP   'SDL_IOS_IDLE_TIMER_DISABLED'"
.br
.RI "\fIA variable controlling whether the idle timer is disabled on iOS\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_ORIENTATIONS\fP   'SDL_IOS_ORIENTATIONS'"
.br
.RI "\fIA variable controlling which orientations are allowed on iOS\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_ACCELEROMETER_AS_JOYSTICK\fP   'SDL_ACCELEROMETER_AS_JOYSTICK'"
.br
.RI "\fIA variable controlling whether an Android built-in accelerometer should be listed as a joystick device, rather than listing actual joysticks only\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_XINPUT_ENABLED\fP   'SDL_XINPUT_ENABLED'"
.br
.RI "\fIA variable that lets you disable the detection and use of Xinput gamepad devices\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_GAMECONTROLLERCONFIG\fP   'SDL_GAMECONTROLLERCONFIG'"
.br
.RI "\fIA variable that lets you manually hint extra gamecontroller db entries\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS\fP   'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS'"
.br
.RI "\fIA variable that lets you enable joystick (and gamecontroller) events even when your app is in the background\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_ALLOW_TOPMOST\fP   'SDL_ALLOW_TOPMOST'"
.br
.RI "\fIIf set to '0' then never set the top most bit on a SDL Window, even if the video mode expects it\&. This is a debugging aid for developers and not expected to be used by end users\&. The default is '1'\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_TIMER_RESOLUTION\fP   'SDL_TIMER_RESOLUTION'"
.br
.RI "\fIA variable that controls the timer resolution, in milliseconds\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_HIGHDPI_DISABLED\fP   'SDL_VIDEO_HIGHDPI_DISABLED'"
.br
.RI "\fIIf set to 1, then do not allow high-DPI windows\&. ('Retina' on Mac) \fP"
.ti -1c
.RI "#define \fBSDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\fP   'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK'"
.br
.RI "\fIA variable that determines whether ctrl+click should generate a right-click event on Mac\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_WIN_D3DCOMPILER\fP   'SDL_VIDEO_WIN_D3DCOMPILER'"
.br
.RI "\fIA variable specifying which shader compiler to preload when using the Chrome ANGLE binaries\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT\fP   'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT'"
.br
.RI "\fIA variable that is the address of another SDL_Window* (as a hex string formatted with '%p')\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_WINRT_PRIVACY_POLICY_URL\fP   'SDL_WINRT_PRIVACY_POLICY_URL'"
.br
.RI "\fIA URL to a WinRT app's privacy policy\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_WINRT_PRIVACY_POLICY_LABEL\fP   'SDL_WINRT_PRIVACY_POLICY_LABEL'"
.br
.RI "\fILabel text for a WinRT app's privacy policy link\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_WINRT_HANDLE_BACK_BUTTON\fP   'SDL_WINRT_HANDLE_BACK_BUTTON'"
.br
.RI "\fIIf set to '1', back button press events on Windows Phone 8+ will be marked as handled\&. \fP"
.ti -1c
.RI "#define \fBSDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES\fP   'SDL_VIDEO_MAC_FULLSCREEN_SPACES'"
.br
.RI "\fIA variable that dictates policy for fullscreen Spaces on Mac OS X\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBvoid\fP(* \fBSDL_HintCallback\fP) (\fBvoid\fP *userdata, const char *name, const char *oldValue, const char *newValue)"
.br
.RI "\fIAdd a function to watch a particular hint\&. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBSDL_HintPriority\fP { \fBSDL_HINT_DEFAULT\fP, \fBSDL_HINT_NORMAL\fP, \fBSDL_HINT_OVERRIDE\fP }"
.br
.RI "\fIAn enumeration of hint priorities\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "DECLSPEC SDL_bool SDLCALL \fBSDL_SetHintWithPriority\fP (const char *name, const char *value, \fBSDL_HintPriority\fP priority)"
.br
.RI "\fISet a hint with a specific priority\&. \fP"
.ti -1c
.RI "DECLSPEC SDL_bool SDLCALL \fBSDL_SetHint\fP (const char *name, const char *value)"
.br
.RI "\fISet a hint with normal priority\&. \fP"
.ti -1c
.RI "DECLSPEC const char *SDLCALL \fBSDL_GetHint\fP (const char *name)"
.br
.RI "\fIGet a hint\&. \fP"
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_AddHintCallback\fP (const char *name, \fBSDL_HintCallback\fP callback, \fBvoid\fP *userdata)"
.br
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_DelHintCallback\fP (const char *name, \fBSDL_HintCallback\fP callback, \fBvoid\fP *userdata)"
.br
.RI "\fIRemove a function watching a particular hint\&. \fP"
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_ClearHints\fP (\fBvoid\fP)"
.br
.RI "\fIClear all hints\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Official documentation for SDL configuration variables
.PP
This file contains functions to set and get configuration hints, as well as listing each of them alphabetically\&.
.PP
The convention for naming hints is SDL_HINT_X, where 'SDL_X' is the environment variable that can be used to override the default\&.
.PP
In general these hints are just that - they may or may not be supported or applicable on any given platform, but they provide a way for an application or user to give the library a hint as to how they would like the library to work\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define SDL_HINT_ACCELEROMETER_AS_JOYSTICK   'SDL_ACCELEROMETER_AS_JOYSTICK'"

.PP
A variable controlling whether an Android built-in accelerometer should be listed as a joystick device, rather than listing actual joysticks only\&. This variable can be set to the following values: '0' - List only real joysticks and accept input from them '1' - List real joysticks along with the accelerometer as if it were a 3 axis joystick (the default)\&. 
.SS "#define SDL_HINT_ALLOW_TOPMOST   'SDL_ALLOW_TOPMOST'"

.PP
If set to '0' then never set the top most bit on a SDL Window, even if the video mode expects it\&. This is a debugging aid for developers and not expected to be used by end users\&. The default is '1'\&. This variable can be set to the following values: '0' - don't allow topmost '1' - allow topmost 
.SS "#define SDL_HINT_FRAMEBUFFER_ACCELERATION   'SDL_FRAMEBUFFER_ACCELERATION'"

.PP
A variable controlling how 3D acceleration is used to accelerate the SDL screen surface\&. SDL can try to accelerate the SDL screen surface by using streaming textures with a 3D rendering engine\&. This variable controls whether and how this is done\&.
.PP
This variable can be set to the following values: '0' - Disable 3D acceleration '1' - Enable 3D acceleration, using the default renderer\&. 'X' - Enable 3D acceleration, using X where X is one of the valid rendering drivers\&. (e\&.g\&. 'direct3d', 'opengl', etc\&.)
.PP
By default SDL tries to make a best guess for each platform whether to use acceleration or not\&. 
.SS "#define SDL_HINT_GAMECONTROLLERCONFIG   'SDL_GAMECONTROLLERCONFIG'"

.PP
A variable that lets you manually hint extra gamecontroller db entries\&. The variable should be newline delimited rows of gamecontroller config data, see \fBSDL_gamecontroller\&.h\fP
.PP
This hint must be set before calling SDL_Init(SDL_INIT_GAMECONTROLLER) You can update mappings after the system is initialized with \fBSDL_GameControllerMappingForGUID()\fP and \fBSDL_GameControllerAddMapping()\fP 
.SS "#define SDL_HINT_GRAB_KEYBOARD   'SDL_GRAB_KEYBOARD'"

.PP
A variable controlling whether grabbing input grabs the keyboard\&. This variable can be set to the following values: '0' - Grab will affect only the mouse '1' - Grab will affect mouse and keyboard
.PP
By default SDL will not grab the keyboard so system shortcuts still work\&. 
.SS "#define SDL_HINT_IDLE_TIMER_DISABLED   'SDL_IOS_IDLE_TIMER_DISABLED'"

.PP
A variable controlling whether the idle timer is disabled on iOS\&. When an iOS app does not receive touches for some time, the screen is dimmed automatically\&. For games where the accelerometer is the only input this is problematic\&. This functionality can be disabled by setting this hint\&.
.PP
This variable can be set to the following values: '0' - Enable idle timer '1' - Disable idle timer 
.SS "#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS   'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS'"

.PP
A variable that lets you enable joystick (and gamecontroller) events even when your app is in the background\&. The variable can be set to the following values: '0' - Disable joystick & gamecontroller input events when the application is in the background\&. '1' - Enable joystick & gamecontroller input events when the application is in the background\&.
.PP
The default value is '0'\&. This hint may be set at any time\&. 
.SS "#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK   'SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK'"

.PP
A variable that determines whether ctrl+click should generate a right-click event on Mac\&. If present, holding ctrl while left clicking will generate a right click event when on Mac\&. 
.SS "#define SDL_HINT_MOUSE_RELATIVE_MODE_WARP   'SDL_MOUSE_RELATIVE_MODE_WARP'"

.PP
A variable controlling whether relative mouse mode is implemented using mouse warping\&. This variable can be set to the following values: '0' - Relative mouse mode uses raw input '1' - Relative mouse mode uses mouse warping
.PP
By default SDL will use raw input for relative mouse mode 
.SS "#define SDL_HINT_ORIENTATIONS   'SDL_IOS_ORIENTATIONS'"

.PP
A variable controlling which orientations are allowed on iOS\&. In some circumstances it is necessary to be able to explicitly control which UI orientations are allowed\&.
.PP
This variable is a space delimited list of the following values: 'LandscapeLeft', 'LandscapeRight', 'Portrait' 'PortraitUpsideDown' 
.SS "#define SDL_HINT_RENDER_DIRECT3D11_DEBUG   'SDL_RENDER_DIRECT3D11_DEBUG'"

.PP
A variable controlling whether to enable Direct3D 11+'s Debug Layer\&. This variable does not have any effect on the Direct3D 9 based renderer\&.
.PP
This variable can be set to the following values: '0' - Disable Debug Layer use '1' - Enable Debug Layer use
.PP
By default, SDL does not use Direct3D Debug Layer\&. 
.SS "#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE   'SDL_RENDER_DIRECT3D_THREADSAFE'"

.PP
A variable controlling whether the Direct3D device is initialized for thread-safe operations\&. This variable can be set to the following values: '0' - Thread-safety is not enabled (faster) '1' - Thread-safety is enabled
.PP
By default the Direct3D device is created with thread-safety disabled\&. 
.SS "#define SDL_HINT_RENDER_DRIVER   'SDL_RENDER_DRIVER'"

.PP
A variable specifying which render driver to use\&. If the application doesn't pick a specific renderer to use, this variable specifies the name of the preferred renderer\&. If the preferred renderer can't be initialized, the normal default renderer is used\&.
.PP
This variable is case insensitive and can be set to the following values: 'direct3d' 'opengl' 'opengles2' 'opengles' 'software'
.PP
The default varies by platform, but it's the first one in the list that is available on the current platform\&. 
.SS "#define SDL_HINT_RENDER_OPENGL_SHADERS   'SDL_RENDER_OPENGL_SHADERS'"

.PP
A variable controlling whether the OpenGL render driver uses shaders if they are available\&. This variable can be set to the following values: '0' - Disable shaders '1' - Enable shaders
.PP
By default shaders are used if OpenGL supports them\&. 
.SS "#define SDL_HINT_RENDER_SCALE_QUALITY   'SDL_RENDER_SCALE_QUALITY'"

.PP
A variable controlling the scaling quality\&. This variable can be set to the following values: '0' or 'nearest' - Nearest pixel sampling '1' or 'linear' - Linear filtering (supported by OpenGL and Direct3D) '2' or 'best' - Currently this is the same as 'linear'
.PP
By default nearest pixel sampling is used 
.SS "#define SDL_HINT_RENDER_VSYNC   'SDL_RENDER_VSYNC'"

.PP
A variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing\&. This variable can be set to the following values: '0' - Disable vsync '1' - Enable vsync
.PP
By default SDL does not sync screen surface updates with vertical refresh\&. 
.SS "#define SDL_HINT_TIMER_RESOLUTION   'SDL_TIMER_RESOLUTION'"

.PP
A variable that controls the timer resolution, in milliseconds\&. The higher resolution the timer, the more frequently the CPU services timer interrupts, and the more precise delays are, but this takes up power and CPU time\&. This hint is only used on Windows 7 and earlier\&.
.PP
See this blog post for more information: http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
.PP
If this variable is set to '0', the system timer resolution is not set\&.
.PP
The default value is '1'\&. This hint may be set at any time\&. 
.SS "#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER   'SDL_VIDEO_ALLOW_SCREENSAVER'"

.PP
A variable controlling whether the screensaver is enabled\&. This variable can be set to the following values: '0' - Disable screensaver '1' - Enable screensaver
.PP
By default SDL will disable the screensaver\&. 
.SS "#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES   'SDL_VIDEO_MAC_FULLSCREEN_SPACES'"

.PP
A variable that dictates policy for fullscreen Spaces on Mac OS X\&. This hint only applies to Mac OS X\&.
.PP
The variable can be set to the following values: '0' - Disable Spaces support (FULLSCREEN_DESKTOP won't use them and SDL_WINDOW_RESIZABLE windows won't offer the 'fullscreen' button on their titlebars)\&. '1' - Enable Spaces support (FULLSCREEN_DESKTOP will use them and SDL_WINDOW_RESIZABLE windows will offer the 'fullscreen' button on their titlebars)\&.
.PP
The default value is '1'\&. Spaces are disabled regardless of this hint if the OS isn't at least Mac OS X Lion (10\&.7)\&. This hint must be set before any windows are created\&. 
.SS "#define SDL_HINT_VIDEO_WIN_D3DCOMPILER   'SDL_VIDEO_WIN_D3DCOMPILER'"

.PP
A variable specifying which shader compiler to preload when using the Chrome ANGLE binaries\&. SDL has EGL and OpenGL ES2 support on Windows via the ANGLE project\&. It can use two different sets of binaries, those compiled by the user from source or those provided by the Chrome browser\&. In the later case, these binaries require that SDL loads a DLL providing the shader compiler\&.
.PP
This variable can be set to the following values: 'd3dcompiler_46\&.dll' - default, best for Vista or later\&. 'd3dcompiler_43\&.dll' - for XP support\&. 'none' - do not load any library, useful if you compiled ANGLE from source and included the compiler in your binaries\&. 
.SS "#define SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT   'SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT'"

.PP
A variable that is the address of another SDL_Window* (as a hex string formatted with '%p')\&. If this hint is set before \fBSDL_CreateWindowFrom()\fP and the SDL_Window* it is set to has SDL_WINDOW_OPENGL set (and running on WGL only, currently), then two things will occur on the newly created SDL_Window:
.PP
.IP "1." 4
Its pixel format will be set to the same pixel format as this SDL_Window\&. This is needed for example when sharing an OpenGL context across multiple windows\&.
.IP "2." 4
The flag SDL_WINDOW_OPENGL will be set on the new window so it can be used for OpenGL rendering\&.
.PP
.PP
This variable can be set to the following values: The address (as a string '%p') of the SDL_Window* that new windows created with \fBSDL_CreateWindowFrom()\fP should share a pixel format with\&. 
.SS "#define SDL_HINT_VIDEO_X11_XINERAMA   'SDL_VIDEO_X11_XINERAMA'"

.PP
A variable controlling whether the X11 Xinerama extension should be used\&. This variable can be set to the following values: '0' - Disable Xinerama '1' - Enable Xinerama
.PP
By default SDL will use Xinerama if it is available\&. 
.SS "#define SDL_HINT_VIDEO_X11_XRANDR   'SDL_VIDEO_X11_XRANDR'"

.PP
A variable controlling whether the X11 XRandR extension should be used\&. This variable can be set to the following values: '0' - Disable XRandR '1' - Enable XRandR
.PP
By default SDL will not use XRandR because of window manager issues\&. 
.SS "#define SDL_HINT_VIDEO_X11_XVIDMODE   'SDL_VIDEO_X11_XVIDMODE'"

.PP
A variable controlling whether the X11 VidMode extension should be used\&. This variable can be set to the following values: '0' - Disable XVidMode '1' - Enable XVidMode
.PP
By default SDL will use XVidMode if it is available\&. 
.SS "#define SDL_HINT_WINRT_HANDLE_BACK_BUTTON   'SDL_WINRT_HANDLE_BACK_BUTTON'"

.PP
If set to '1', back button press events on Windows Phone 8+ will be marked as handled\&. TODO, WinRT: document SDL_HINT_WINRT_HANDLE_BACK_BUTTON need and use For now, more details on why this is needed can be found at the beginning of the following web page: http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj247550(v=vs.105).aspx 
.SS "#define SDL_HINT_WINRT_PRIVACY_POLICY_LABEL   'SDL_WINRT_PRIVACY_POLICY_LABEL'"

.PP
Label text for a WinRT app's privacy policy link\&. Network-enabled WinRT apps must include a privacy policy\&. On Windows 8, 8\&.1, and RT, Microsoft mandates that this policy be available via the Windows Settings charm\&. SDL provides code to add a link there, with its label text being set via the optional hint, SDL_HINT_WINRT_PRIVACY_POLICY_LABEL\&.
.PP
Please note that a privacy policy's contents are not set via this hint\&. A separate hint, SDL_HINT_WINRT_PRIVACY_POLICY_URL, is used to link to the actual text of the policy\&.
.PP
The contents of this hint should be encoded as a UTF8 string\&.
.PP
The default value is 'Privacy Policy'\&. This hint should only be set during app initialization, preferably before any calls to SDL_Init\&.
.PP
For additional information on linking to a privacy policy, see the documentation for SDL_HINT_WINRT_PRIVACY_POLICY_URL\&. 
.SS "#define SDL_HINT_WINRT_PRIVACY_POLICY_URL   'SDL_WINRT_PRIVACY_POLICY_URL'"

.PP
A URL to a WinRT app's privacy policy\&. All network-enabled WinRT apps must make a privacy policy available to its users\&. On Windows 8, 8\&.1, and RT, Microsoft mandates that this policy be be available in the Windows Settings charm, as accessed from within the app\&. SDL provides code to add a URL-based link there, which can point to the app's privacy policy\&.
.PP
To setup a URL to an app's privacy policy, set SDL_HINT_WINRT_PRIVACY_POLICY_URL before calling any SDL_Init functions\&. The contents of the hint should be a valid URL\&. For example, 'http://www\&.example\&.com'\&.
.PP
The default value is '', which will prevent SDL from adding a privacy policy link to the Settings charm\&. This hint should only be set during app init\&.
.PP
The label text of an app's 'Privacy Policy' link may be customized via another hint, SDL_HINT_WINRT_PRIVACY_POLICY_LABEL\&.
.PP
Please note that on Windows Phone, Microsoft does not provide standard UI for displaying a privacy policy link, and as such, SDL_HINT_WINRT_PRIVACY_POLICY_URL will not get used on that platform\&. Network-enabled phone apps should display their privacy policy through some other, in-app means\&. 
.SS "#define SDL_HINT_XINPUT_ENABLED   'SDL_XINPUT_ENABLED'"

.PP
A variable that lets you disable the detection and use of Xinput gamepad devices\&. The variable can be set to the following values: '0' - Disable XInput detection (only uses direct input) '1' - Enable XInput detection (the default) 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBvoid\fP(* SDL_HintCallback) (\fBvoid\fP *userdata, const char *name, const char *oldValue, const char *newValue)"

.PP
Add a function to watch a particular hint\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The hint to watch 
.br
\fIcallback\fP The function to call when the hint value changes 
.br
\fIuserdata\fP A pointer to pass to the callback function 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "DECLSPEC \fBvoid\fP SDLCALL SDL_ClearHints (\fBvoid\fP)"

.PP
Clear all hints\&. This function is called during \fBSDL_Quit()\fP to free stored hints\&. 
.SS "DECLSPEC \fBvoid\fP SDLCALL SDL_DelHintCallback (const char * name, \fBSDL_HintCallback\fP callback, \fBvoid\fP * userdata)"

.PP
Remove a function watching a particular hint\&. 
.PP
\fBParameters:\fP
.RS 4
\fIname\fP The hint being watched 
.br
\fIcallback\fP The function being called when the hint value changes 
.br
\fIuserdata\fP A pointer being passed to the callback function 
.RE
.PP

.SS "DECLSPEC const char* SDLCALL SDL_GetHint (const char * name)"

.PP
Get a hint\&. 
.PP
\fBReturns:\fP
.RS 4
The string value of a hint variable\&. 
.RE
.PP

.SS "DECLSPEC SDL_bool SDLCALL SDL_SetHint (const char * name, const char * value)"

.PP
Set a hint with normal priority\&. 
.PP
\fBReturns:\fP
.RS 4
SDL_TRUE if the hint was set, SDL_FALSE otherwise 
.RE
.PP

.SS "DECLSPEC SDL_bool SDLCALL SDL_SetHintWithPriority (const char * name, const char * value, \fBSDL_HintPriority\fP priority)"

.PP
Set a hint with a specific priority\&. The priority controls the behavior when setting a hint that already has a value\&. Hints will replace existing hints of their priority and lower\&. Environment variables are considered to have override priority\&.
.PP
\fBReturns:\fP
.RS 4
SDL_TRUE if the hint was set, SDL_FALSE otherwise 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
