.TH "lib/gdl/includes/SDL_loadso.h" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/gdl/includes/SDL_loadso.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'SDL_stdinc\&.h'\fP
.br
\fC#include 'SDL_error\&.h'\fP
.br
\fC#include 'begin_code\&.h'\fP
.br
\fC#include 'close_code\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "DECLSPEC \fBvoid\fP *SDLCALL \fBSDL_LoadObject\fP (const char *sofile)"
.br
.ti -1c
.RI "DECLSPEC \fBvoid\fP *SDLCALL \fBSDL_LoadFunction\fP (\fBvoid\fP *handle, const char *name)"
.br
.ti -1c
.RI "DECLSPEC \fBvoid\fP SDLCALL \fBSDL_UnloadObject\fP (\fBvoid\fP *handle)"
.br
.in -1c
.SH "Detailed Description"
.PP 
System dependent library loading routines
.PP
Some things to keep in mind: 
.PD 0

.IP "\(bu" 2
These functions only work on C function names\&. Other languages may have name mangling and intrinsic language support that varies from compiler to compiler\&. 
.IP "\(bu" 2
Make sure you declare your function pointers with the same calling convention as the actual library function\&. Your code will crash mysteriously if you do not do this\&. 
.IP "\(bu" 2
Avoid namespace collisions\&. If you load a symbol from the library, it is not defined whether or not it goes into the global symbol namespace for the application\&. If it does and it conflicts with symbols in your code or other shared libraries, you will not get the results you expect\&. :) 
.PP

.SH "Function Documentation"
.PP 
.SS "DECLSPEC \fBvoid\fP* SDLCALL SDL_LoadFunction (\fBvoid\fP * handle, const char * name)"
Given an object handle, this function looks up the address of the named function in the shared object and returns it\&. This address is no longer valid after calling \fBSDL_UnloadObject()\fP\&. 
.SS "DECLSPEC \fBvoid\fP* SDLCALL SDL_LoadObject (const char * sofile)"
This function dynamically loads a shared object and returns a pointer to the object handle (or NULL if there was an error)\&. The 'sofile' parameter is a system dependent name of the object file\&. 
.SS "DECLSPEC \fBvoid\fP SDLCALL SDL_UnloadObject (\fBvoid\fP * handle)"
Unload a shared object from memory\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
