.TH "core_func_integer" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
core_func_integer \- Integer functions
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genUType > GLM_FUNC_DECL genUType \fBglm::uaddCarry\fP (genUType const &x, genUType const &y, genUType &carry)"
.br
.ti -1c
.RI "template<typename genUType > GLM_FUNC_DECL genUType \fBglm::usubBorrow\fP (genUType const &x, genUType const &y, genUType &borrow)"
.br
.ti -1c
.RI "template<typename genUType > GLM_FUNC_DECL \fBvoid\fP \fBglm::umulExtended\fP (genUType const &x, genUType const &y, genUType &msb, genUType &lsb)"
.br
.ti -1c
.RI "template<typename genIType > GLM_FUNC_DECL \fBvoid\fP \fBglm::imulExtended\fP (genIType const &x, genIType const &y, genIType &msb, genIType &lsb)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBglm::bitfieldExtract\fP (genIUType const &Value, \fBint\fP const &Offset, \fBint\fP const &Bits)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBglm::bitfieldInsert\fP (genIUType const &Base, genIUType const &Insert, \fBint\fP const &Offset, \fBint\fP const &Bits)"
.br
.ti -1c
.RI "template<typename genIUType > GLM_FUNC_DECL genIUType \fBglm::bitfieldReverse\fP (genIUType const &Value)"
.br
.ti -1c
.RI "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType< T >::signed_type \fBglm::bitCount\fP (genIUType< T > const &Value)"
.br
.ti -1c
.RI "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType< T >::signed_type \fBglm::findLSB\fP (genIUType< T > const &Value)"
.br
.ti -1c
.RI "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType< T >::signed_type \fBglm::findMSB\fP (genIUType< T > const &Value)"
.br
.in -1c
.SH "Detailed Description"
.PP 
These all operate component-wise\&. The description is per component\&. The notation [a, b] means the set of bits from bit-number a through bit-number b, inclusive\&. The lowest-order bit is bit 0\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType<T>::signed_type glm::bitCount (genIUType< T > const & Value)"
Returns the number of bits set to 1 in the binary representation of value\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL bitCount man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP
.RE
.PP
\fBTodo\fP
.RS 4
Clarify the declaration to specify that scalars are suported\&. 
.RE
.PP

.SS "template<typename genIUType > GLM_FUNC_DECL genIUType glm::bitfieldExtract (genIUType const & Value, \fBint\fP const & Offset, \fBint\fP const & Bits)"
Extracts bits [offset, offset + bits - 1] from value, returning them in the least significant bits of the result\&. For unsigned data types, the most significant bits of the result will be set to zero\&. For signed data types, the most significant bits will be set to the value of bit offset + base - 1\&.
.PP
If bits is zero, the result will be zero\&. The result will be undefined if offset or bits is negative, or if the sum of offset and bits is greater than the number of bits used to store the operand\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL bitfieldExtract man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename genIUType > GLM_FUNC_DECL genIUType glm::bitfieldInsert (genIUType const & Base, genIUType const & Insert, \fBint\fP const & Offset, \fBint\fP const & Bits)"
Returns the insertion the bits least-significant bits of insert into base\&.
.PP
The result will have bits [offset, offset + bits - 1] taken from bits [0, bits - 1] of insert, and all other bits taken directly from the corresponding bits of base\&. If bits is zero, the result will simply be base\&. The result will be undefined if offset or bits is negative, or if the sum of offset and bits is greater than the number of bits used to store the operand\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL bitfieldInsert man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename genIUType > GLM_FUNC_DECL genIUType glm::bitfieldReverse (genIUType const & Value)"
Returns the reversal of the bits of value\&. The bit numbered n of the result will be taken from bit (bits - 1) - n of value, where bits is the total number of bits used to represent value\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL bitfieldReverse man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType<T>::signed_type glm::findLSB (genIUType< T > const & Value)"
Returns the bit number of the least significant bit set to 1 in the binary representation of value\&. If value is zero, -1 will be returned\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL findLSB man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP
.RE
.PP
\fBTodo\fP
.RS 4
Clarify the declaration to specify that scalars are suported\&. 
.RE
.PP

.SS "template<typename T , template< typename > class genIUType> GLM_FUNC_DECL genIUType<T>::signed_type glm::findMSB (genIUType< T > const & Value)"
Returns the bit number of the most significant bit in the binary representation of value\&. For positive integers, the result will be the bit number of the most significant bit set to 1\&. For negative integers, the result will be the bit number of the most significant bit set to 0\&. For a value of zero or negative one, -1 will be returned\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIUType\fP Signed or unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL findMSB man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP
.RE
.PP
\fBTodo\fP
.RS 4
Clarify the declaration to specify that scalars are suported\&. 
.RE
.PP

.SS "template<typename genIType > GLM_FUNC_DECL \fBvoid\fP glm::imulExtended (genIType const & x, genIType const & y, genIType & msb, genIType & lsb)"
Multiplies 32-bit integers x and y, producing a 64-bit result\&. The 32 least-significant bits are returned in lsb\&. The 32 most-significant bits are returned in msb\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenIType\fP Signed integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL imulExtended man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename genUType > GLM_FUNC_DECL genUType glm::uaddCarry (genUType const & x, genUType const & y, genUType & carry)"
Adds 32-bit unsigned integer x and y, returning the sum modulo pow(2, 32)\&. The value carry is set to 0 if the sum was less than pow(2, 32), or to 1 otherwise\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenUType\fP Unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL uaddCarry man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename genUType > GLM_FUNC_DECL \fBvoid\fP glm::umulExtended (genUType const & x, genUType const & y, genUType & msb, genUType & lsb)"
Multiplies 32-bit integers x and y, producing a 64-bit result\&. The 32 least-significant bits are returned in lsb\&. The 32 most-significant bits are returned in msb\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenUType\fP Unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL umulExtended man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SS "template<typename genUType > GLM_FUNC_DECL genUType glm::usubBorrow (genUType const & x, genUType const & y, genUType & borrow)"
Subtracts the 32-bit unsigned integer y from x, returning the difference if non-negative, or pow(2, 32) plus the difference otherwise\&. The value borrow is set to 0 if x >= y, or to 1 otherwise\&.
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIgenUType\fP Unsigned integer scalar or vector types\&.
.RE
.PP
\fBSee also:\fP
.RS 4
\fCGLSL usubBorrow man page\fP 
.PP
\fCGLSL 4\&.20\&.8 specification, section 8\&.8 Integer Functions\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
