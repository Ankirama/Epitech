.TH "gtc_type_ptr" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtc_type_ptr \- GLM_GTC_type_ptr
.PP
Handles the interaction between pointers and vector, matrix types\&.  

.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename genType > genType::value_type const * \fBglm::value_ptr\fP (genType const &vec)"
.br
.ti -1c
.RI "template<typename T > detail::tvec2< T > \fBglm::make_vec2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tvec3< T > \fBglm::make_vec3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tvec4< T > \fBglm::make_vec4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat2x2< T > \fBglm::make_mat2x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat2x3< T > \fBglm::make_mat2x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat2x4< T > \fBglm::make_mat2x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat3x2< T > \fBglm::make_mat3x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat3x3< T > \fBglm::make_mat3x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat3x4< T > \fBglm::make_mat3x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat4x2< T > \fBglm::make_mat4x2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat4x3< T > \fBglm::make_mat4x3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat4x4< T > \fBglm::make_mat4x4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat2x2< T > \fBglm::make_mat2\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat3x3< T > \fBglm::make_mat3\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tmat4x4< T > \fBglm::make_mat4\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > detail::tquat< T > \fBglm::make_quat\fP (T const *const ptr)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tvec2< T > const &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tvec2< T > &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tvec3< T > const &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tvec3< T > &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tvec4< T > const &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tvec4< T > &vec)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat2x2< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat2x2< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat3x3< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat3x3< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat4x4< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat4x4< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat2x3< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat2x3< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat3x2< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat3x2< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat2x4< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat2x4< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat4x2< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat4x2< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat3x4< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat3x4< T > &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tmat4x3< T > const &mat)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T const * \fBglm::value_ptr\fP (detail::tquat< T > const &q)"
.br
.ti -1c
.RI "template<typename T > GLM_FUNC_QUALIFIER T * \fBglm::value_ptr\fP (detail::tmat4x3< T > &mat)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Handles the interaction between pointers and vector, matrix types\&. 

This extension defines an overloaded function, glm::value_ptr, which takes any of the \fBcore template types\fP\&. It returns a pointer to the memory layout of the object\&. Matrix types store their values in column-major order\&.
.PP
This is useful for uploading data to matrices or copying data to buffer objects\&.
.PP
Example: 
.PP
.nf
#include <glm/glm\&.hpp>
#include <glm/gtc/type_ptr\&.hpp>

glm::vec3 aVector(3);
glm::mat4 someMatrix(1\&.0);

glUniform3fv(uniformLoc, 1, glm::value_ptr(aVector));
glUniformMatrix4fv(uniformMatrixLoc, 1, GL_FALSE, glm::value_ptr(someMatrix));

.fi
.PP
.PP
<\fBglm/gtc/type_ptr\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T > detail::tmat2x2<T> glm::make_mat2 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat2x2<T> glm::make_mat2x2 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat2x3<T> glm::make_mat2x3 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat2x4<T> glm::make_mat2x4 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat3x3<T> glm::make_mat3 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat3x2<T> glm::make_mat3x2 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat3x3<T> glm::make_mat3x3 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat3x4<T> glm::make_mat3x4 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat4x4<T> glm::make_mat4 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat4x2<T> glm::make_mat4x2 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat4x3<T> glm::make_mat4x3 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tmat4x4<T> glm::make_mat4x4 (T const *const ptr)"
Build a matrix from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tquat<T> glm::make_quat (T const *const ptr)"
Build a quaternion from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tvec2<T> glm::make_vec2 (T const *const ptr)"
Build a vector from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tvec3<T> glm::make_vec3 (T const *const ptr)"
Build a vector from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > detail::tvec4<T> glm::make_vec4 (T const *const ptr)"
Build a vector from a pointer\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tvec2\fP< T > const & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tvec2\fP< T > & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tvec3\fP< T > const & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tvec3\fP< T > & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename genType > genType::value_type const* glm::value_ptr (genType const & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tvec4\fP< T > const & vec)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tvec4\fP< T > & vec)"
Return the constant address to the data of the input parameter\&. From GLM_GTC_type_ptr extension\&. 
.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat2x2\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat2x2\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat3x3\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat3x3\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat4x4\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat4x4\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. From GLM_GTC_type_ptr extension\&. 
.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat2x3\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat2x3\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat3x2\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat3x2\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat2x4\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat2x4\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat4x2\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat4x2\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat3x4\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat3x4\fP< T > & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tmat4x3\fP< T > const & mat)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T const* glm::value_ptr (\fBdetail::tquat\fP< T > const & q)"
Return the constant address to the data of the input parameter\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SS "template<typename T > GLM_FUNC_QUALIFIER T* glm::value_ptr (\fBdetail::tmat4x3\fP< T > & mat)"
Get the address of the matrix content\&. 
.PP
\fBSee also:\fP
.RS 4
\fBGLM_GTC_type_ptr\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
