.TH "gtx_integer" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_integer \- GLM_GTX_integer
.PP
Add support for integer for core functions\&.  

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef signed \fBint\fP \fBglm::sint\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBint\fP \fBglm::pow\fP (\fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "\fBint\fP \fBglm::sqrt\fP (\fBint\fP x)"
.br
.ti -1c
.RI "template<typename genIUType > genIUType \fBglm::log2\fP (genIUType const &x)"
.br
.ti -1c
.RI "unsigned \fBint\fP \fBglm::floor_log2\fP (unsigned \fBint\fP x)"
.br
.ti -1c
.RI "\fBint\fP \fBglm::mod\fP (\fBint\fP x, \fBint\fP y)"
.br
.ti -1c
.RI "template<typename genType > genType \fBglm::factorial\fP (genType const &x)"
.br
.ti -1c
.RI "uint \fBglm::pow\fP (uint x, uint y)"
.br
.ti -1c
.RI "uint \fBglm::sqrt\fP (uint x)"
.br
.ti -1c
.RI "uint \fBglm::mod\fP (uint x, uint y)"
.br
.ti -1c
.RI "uint \fBglm::nlz\fP (uint x)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Add support for integer for core functions\&. 

<\fBglm/gtx/integer\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef signed \fBint\fP \fBglm::sint\fP"
32bit signed integer\&. From GLM_GTX_integer extension\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename genType > genType glm::factorial (genType const & x)"
Return the factorial value of a number (!12 max, integer only) From GLM_GTX_integer extension\&. 
.SS "unsigned \fBint\fP glm::floor_log2 (unsigned \fBint\fP x)"
Returns the floor log2 of x\&. From GLM_GTX_integer extension\&. 
.SS "template<typename genIUType > genIUType glm::log2 (genIUType const & x)"
Returns the log2 of x\&. Can be reliably using to compute mipmap count from the texture size\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER \fBint\fP glm::mod (\fBint\fP x, \fBint\fP y)"
Modulus\&. Returns x - y * floor(x / y) for each component in x using the floating point value y\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::mod (\fBuint\fP x, \fBuint\fP y)"
Modulus\&. Returns x - y * floor(x / y) for each component in x using the floating point value y\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER unsigned \fBint\fP glm::nlz (\fBuint\fP x)"
Returns the number of leading zeros\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER \fBint\fP glm::pow (\fBint\fP x, \fBint\fP y)"
Returns x raised to the y power\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::pow (\fBuint\fP x, \fBuint\fP y)"
Returns x raised to the y power\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER \fBint\fP glm::sqrt (\fBint\fP x)"
Returns the positive square root of x\&. From GLM_GTX_integer extension\&. 
.SS "GLM_FUNC_QUALIFIER uint glm::sqrt (\fBuint\fP x)"
Returns the positive square root of x\&. From GLM_GTX_integer extension\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
