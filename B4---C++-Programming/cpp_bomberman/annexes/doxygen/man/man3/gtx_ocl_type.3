.TH "gtx_ocl_type" 3 "Sun Jun 7 2015" "Version 0.42" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gtx_ocl_type \- GLM_GTX_ocl_type
.PP
OpenCL types\&.  

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef detail::int8 \fBglm::gtx::cl_char\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int16 \fBglm::gtx::cl_short\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int32 \fBglm::gtx::cl_int\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int64 \fBglm::gtx::cl_long\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint8 \fBglm::gtx::cl_uchar\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint16 \fBglm::gtx::cl_ushort\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint32 \fBglm::gtx::cl_uint\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint64 \fBglm::gtx::cl_ulong\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::float16 \fBglm::gtx::cl_half\fP"
.br
.RI "\fIHalf-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::float32 \fBglm::gtx::cl_float\fP"
.br
.RI "\fISingle-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int8 \fBglm::gtx::cl_char1\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int16 \fBglm::gtx::cl_short1\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int32 \fBglm::gtx::cl_int1\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::int64 \fBglm::gtx::cl_long1\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint8 \fBglm::gtx::cl_uchar1\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint16 \fBglm::gtx::cl_ushort1\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint32 \fBglm::gtx::cl_uint1\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::uint64 \fBglm::gtx::cl_ulong1\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::float32 \fBglm::gtx::cl_float1\fP"
.br
.RI "\fISingle-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::int8 > \fBglm::gtx::cl_char2\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::int16 > \fBglm::gtx::cl_short2\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::int32 > \fBglm::gtx::cl_int2\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::int64 > \fBglm::gtx::cl_long2\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::uint8 > \fBglm::gtx::cl_uchar2\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::uint16 > \fBglm::gtx::cl_ushort2\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::uint32 > \fBglm::gtx::cl_uint2\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::uint64 > \fBglm::gtx::cl_ulong2\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec2< detail::float32 > \fBglm::gtx::cl_float2\fP"
.br
.RI "\fISingle-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::int8 > \fBglm::gtx::cl_char3\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::int16 > \fBglm::gtx::cl_short3\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::int32 > \fBglm::gtx::cl_int3\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::int64 > \fBglm::gtx::cl_long3\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::uint8 > \fBglm::gtx::cl_uchar3\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::uint16 > \fBglm::gtx::cl_ushort3\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::uint32 > \fBglm::gtx::cl_uint3\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::uint64 > \fBglm::gtx::cl_ulong3\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec3< detail::float32 > \fBglm::gtx::cl_float3\fP"
.br
.RI "\fISingle-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::int8 > \fBglm::gtx::cl_char4\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::int16 > \fBglm::gtx::cl_short4\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::int32 > \fBglm::gtx::cl_int4\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::int64 > \fBglm::gtx::cl_long4\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::uint8 > \fBglm::gtx::cl_uchar4\fP"
.br
.RI "\fI8bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::uint16 > \fBglm::gtx::cl_ushort4\fP"
.br
.RI "\fI16bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::uint32 > \fBglm::gtx::cl_uint4\fP"
.br
.RI "\fI32bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::uint64 > \fBglm::gtx::cl_ulong4\fP"
.br
.RI "\fI64bit signed integer\&. (from GLM_GTX_ocl_type extension) \fP"
.ti -1c
.RI "typedef detail::tvec4< detail::float32 > \fBglm::gtx::cl_float4\fP"
.br
.RI "\fISingle-precision floating-point scalar\&. (from GLM_GTX_ocl_type extension) \fP"
.in -1c
.SH "Detailed Description"
.PP 
OpenCL types\&. 

<\fBglm/gtx/ocl_type\&.hpp\fP> need to be included to use these functionalities\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
