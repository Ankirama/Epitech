.TH "tinyxml2::XMLComment" 3 "Tue Jun 9 2015" "Version 0.53" "cpp_bomberman" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tinyxml2::XMLComment \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tinyxml2\&.h>\fP
.PP
Inherits \fBtinyxml2::XMLNode\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual \fBXMLComment\fP * \fBToComment\fP ()"
.br
.RI "\fISafely cast to a Comment, or null\&. \fP"
.ti -1c
.RI "virtual const \fBXMLComment\fP * \fBToComment\fP () const "
.br
.ti -1c
.RI "virtual bool \fBAccept\fP (\fBXMLVisitor\fP *visitor) const "
.br
.ti -1c
.RI "virtual \fBXMLNode\fP * \fBShallowClone\fP (\fBXMLDocument\fP *document) const "
.br
.ti -1c
.RI "virtual bool \fBShallowEqual\fP (const \fBXMLNode\fP *compare) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBXMLComment\fP (\fBXMLDocument\fP *doc)"
.br
.ti -1c
.RI "char * \fBParseDeep\fP (char *, \fBStrPair\fP *endTag)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBXMLComment\fP (const \fBXMLComment\fP &)"
.br
.ti -1c
.RI "\fBXMLComment\fP & \fBoperator=\fP (const \fBXMLComment\fP &)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBXMLDocument\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
An XML Comment\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual bool tinyxml2::XMLComment::Accept (\fBXMLVisitor\fP * visitor) const\fC [virtual]\fP"
Accept a hierarchical visit of the nodes in the TinyXML-2 DOM\&. Every node in the XML tree will be conditionally visited and the host will be called back via the \fBXMLVisitor\fP interface\&.
.PP
This is essentially a SAX interface for TinyXML-2\&. (Note however it doesn't re-parse the XML for the callbacks, so the performance of TinyXML-2 is unchanged by using this interface versus any other\&.)
.PP
The interface has been based on ideas from:
.PP
.IP "\(bu" 2
http://www.saxproject.org/
.IP "\(bu" 2
http://c2.com/cgi/wiki?HierarchicalVisitorPattern
.PP
.PP
Which are both good references for 'visiting'\&.
.PP
An example of using \fBAccept()\fP: 
.PP
.nf
XMLPrinter printer;
tinyxmlDoc.Accept( &printer );
const char* xmlcstr = printer.CStr();

.fi
.PP
 
.PP
Implements \fBtinyxml2::XMLNode\fP\&.
.SS "virtual \fBXMLNode\fP* tinyxml2::XMLComment::ShallowClone (\fBXMLDocument\fP * document) const\fC [virtual]\fP"
Make a copy of this node, but not its children\&. You may pass in a Document pointer that will be the owner of the new Node\&. If the 'document' is null, then the node returned will be allocated from the current Document\&. (this->\fBGetDocument()\fP)
.PP
Note: if called on a \fBXMLDocument\fP, this will return null\&. 
.PP
Implements \fBtinyxml2::XMLNode\fP\&.
.SS "virtual bool tinyxml2::XMLComment::ShallowEqual (const \fBXMLNode\fP * compare) const\fC [virtual]\fP"
Test if 2 nodes are the same, but don't test children\&. The 2 nodes do not need to be in the same Document\&.
.PP
Note: if called on a \fBXMLDocument\fP, this will return false\&. 
.PP
Implements \fBtinyxml2::XMLNode\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for cpp_bomberman from the source code\&.
