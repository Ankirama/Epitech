//
// Created by ankirama on 5/12/15.
//

#ifndef CPP_BOMBERMAN_GENERATEMAZE_HH
#define CPP_BOMBERMAN_GENERATEMAZE_HH

  /**
   * @file GenerateMaze.hh
   * @brief create map (random or not)
   * @author ankirama
   * @version 1.01
   */

#include <iostream>
#include <string>
#include <fstream>
#include <random>
#include <list>
#include <map>

# define ID_EMPTY		48 // '0'
# define ID_WALL		49 // '1'
# define ID_BOMB		50 // '2'
# define ID_PLAYER		51 // '3'
# define ID_BLOCK		52 // '4'
# define ID_PLAYER_BOMB		53 // '5'
# define CASE			1.0

/**
 * @class GenerateMaze
 * @brief Generate maze (char *)
 *
 * Singleton to create a specific map
 */

class GenerateMaze {
public:

  /**
   * @brief Used to return the current instance
   *
   * Our class is a singleton so we need a function to use it
   *
   * @return the current class's instance
   */
  static GenerateMaze&            getInstance();

  /**
   * @brief Generate normal map (like bomberman)
   *
   * It will call the init private function and generate a map
   *
   * @param width the maze's width
   * @param heigth the maze's height
   */
  void                            create(int width, int height);

  /**
   * @brief Generate random map
   *
   * It will call create random map with specific width / height
   *
   * @param width the maze's width
   * @param height the maze's height
   */
  void                            createRandom(int width, int height);

  /**
   * @brief get the map generated
   *
   * Get the map generated by create or createRandom
   * Or null if no map generated
   *
   * @return Current map generated
   */
  char                            *getMap() const;

  /**
   * @brief get empty cells in map
   *
   * Get the empty cells in the map generated
   *
   * @return Cells' vector with empty's position
   */
  std::vector <std::pair <int, int> >& getEmptyCells();

  /**
   * @brief set a cell in the map
   *
   * it will a set a cell in the map with an id
   *
   * @param x the x's position in map we want to set
   * @param y the y's position in map we want to set
   * @param id_cell set the cell with specific id (like wall etc)
   */
  void                            setCell(int x, int y, int id_cell);

  /**
   * @brief get a cell in the map
   *
   * Get a cell with specific x and y position
   *
   * @param x the x's position in map we want to get
   * @param y the y's position in map we want to get
   * @return Get the cell's id like wall, empty etc
   */
  int                             getCell(int x, int y);

private:
    /**
     * @brief private = operator to unable it
     *
     * Unused and undefined
     */
    GenerateMaze& operator=(const GenerateMaze&);

    /**
     * @brief private copy constructor
     *
     * Unused
     */
    GenerateMaze(const GenerateMaze&) {}

    /**
     * @brief GenerateMaze's constructor private
     *
     * Used to create a static instance (singleton)
     * We will set default value for width, height and maze.
     */
    GenerateMaze();

    /**
     * @brief GenerateMaze's destructor private
     *
     * Used to destroy instance. It will delete the maze.
     */
    ~GenerateMaze();

private:
  static GenerateMaze               m_instance; /**< used in singleton */
  int				    m_width; /**< maze's width we will generate */
  int				    m_height; /**< maze's height we will generate */
  char                     *m_maze; /**< the maze generated will be hold here */
  std::vector <std::pair <int, int> >m_emptyCell; /**< used to increase cell research */

private:
  /**
   * @brief init map for create
   *
   * Init map with specific pattern (like bomberman)
   *
   * @param width maze's width size
   * @param height maze's height size
   */
  void				  init(int width, int height);

  /**
   * @brief init map for createRandom
   *
   * init map for createRandom with ID_WALL or ID_BLOCK
   *
   * @param width maze's width size
   * @param height maze's height size
   */
  void				  initRandom(int width, int height);

  /**
   * @brief random in 0 - 3 (included)
   *
   * It will generate with random_device, mt19937 and
   * uniform_int_distribution a number in 0 - 3 (included)
   *
   * @return A number in 0 - 3 (included)
   */
  int                 randomDirection() const;

  /**
   * @brief intern function for createRandom
   *
   * Check if the new position is a valid one in createRandom's algo
   *
   * @x current x's position in the map
   * @y current y's position in the map
   * @xModifier modifier we want to apply on our current position (like 1, -1, ...)
   * @yModifier modifier we want to apply on our current position (like 1, -1, ...)
   * @return true if the new position isn't valid else false
   */
  bool				  setWall(int x, int y, int xModifier, int yModifier);
};

#endif //CPP_BOMBERMAN_GENERATEMAZE_HH
