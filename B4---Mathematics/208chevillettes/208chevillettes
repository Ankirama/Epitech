#!/usr/bin/env php
<?php
  $sumSquareX = 0;

  function usage() {
    echo "Usage: ./208chevillettes: O0 O1 O2 O3 O4 O5 O6 O7 O8\n";
    exit ;
  }

  function facto( $n ) {
    $res = 1;
    for ( $i = 1; $i <= $n; ++$i )
      $res *= $i;
    return ( $res );
  }

  function combination( $k, $n ) {
    $res = facto ( $n ) / ( facto( $k ) * facto ( $n - $k ) );
    return ($res);
  }

  //Formule pour un effectif theorique
  function calcTx( $x, $p ) {
    $var = 100 * combination( $x, 100 ) * pow( $p, $x ) * pow ( ( 1 - $p ), 100 - $x );
    return ($var);
  }

  //Calcul tous les Tx pour mettre dans le tableau
  function theoValues( $argv, $p, $size ) {
    $x = 0;
    $res = 0.0;
    $Tx = array();
    $i = 0;
    for ( $x = 0; $x < $size; ++$x ) {
      $tmp = calcTx( $x, $p );
      if ( $argv[$i] < 10 ) {
        $tmp += calcTx( $x + 1, $p );
        ++$i;
        ++$x;
      }
      $res += $tmp;
      ++$i;
      array_push( $Tx, $tmp );
    }
    array_push( $Tx, 100 - $res );
    return $Tx;
  }

  //somme des carres des ecarts
  function sumSquareX( $Tx, $Ox, $size ) {
    $res = 0;
    for ( $i = 0; $i < $size; ++$i ) {
      $sub = pow( ( $Ox[$i] - $Tx[$i] ), 2 );
      $res += $sub / $Tx[$i];
    }
    return ( $res );
  }

  //res dans B(100, $p)
  function  getP( $argv, $Ox, $size ) {
    $res = 0.0;
    for( $i = 0; $i < count( $argv ); ++$i ) {
      $res += $i * $argv[$i];
    }
    return ( floatval( $res / 100.0 ) );
  }

  function display( $argv, &$sumSquareX ) {
    $Ox = array();
    echo "x\t| ";
    for ( $i = 0; $i < count( $argv ); ++$i ) {
      $tmp = 0;
      if ( $argv[$i] < 10 ) {
        $tmp = $argv[$i] + $argv[$i + 1];
        if ( $i == 7 )
          echo "7+\t| ";
        else
          echo $i . "-" . ($i + 1) . "\t| ";
        ++$i;
      }
      else {
        $tmp = $argv[$i];
        echo $i . "\t| ";
      }
      array_push( $Ox, $tmp );
    }
    echo " total\n";
    echo "Ox\t|";
    for ( $i = 0; $i < count( $Ox ); ++$i ) {
      echo $Ox[$i] . "\t| ";
    }
    echo " " . array_sum( $Ox ) . "\n";
    $p = getP( $argv, $Ox, count( $Ox ) ) / 100;
    $Tx = theoValues( $argv, $p, count( $Ox ) );
    $sumSquareX = sumSquareX( $Tx, $Ox, count( $Ox ) );
    $v = count( $Ox ) - 2;
    echo "Tx\t|";
    for ( $i = 0; $i < count( $Tx ); ++$i ) {
      echo number_format( (float) $Tx[$i], 1, '.', '' ) . "\t| ";
    }
    echo " " . array_sum( $Ox ) . "\n\n";
    echo "loi choisie :\t\t\tB(100, " . number_format( ( float ) ( $p ), 4, '.', '' ) . ")\n";
    echo "somme des carres des ecarts :\tX2 = " . number_format( $sumSquareX, 3, '.', '' ) . "\n";
    echo "degres de liberte :\tv = " . $v . "\n";
    return $v;
  }

  function setTableX() {
    $tLegend = array(99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1);
    $t99 = array( 0.00, 0.02, 0.11, 0.30, 0.55, 0.7, 1.24, 1.65, 2.09, 2.56 );
    $t90 = array( 0.02, 0.21, 0.58, 1.06, 1.61, 2.20, 2.83, 3.49, 4.17, 4.87 );
    $t80 = array( 0.06, 0.45, 1.01, 1.65, 2.34, 3.07, 3.82, 4.59, 5.38, 6.18 );
    $t70 = array( 0.15, 0.71, 1.42, 2.19, 3.00, 3.83, 4.67, 5.53, 6.39, 7.27 );
    $t60 = array( 0.27, 1.02, 1.87, 2.75, 3.66, 4.57, 5.49, 6.42, 7.36, 8.30 );
    $t50 = array( 0.45, 1.39, 2.37, 3.36, 4.35, 5.35, 6.35, 7.34, 8.34, 9.34 );
    $t40 = array( 0.71, 1.83, 2.95, 4.04, 5.13, 6.21, 7.28, 8.35, 9.41, 10.47 );
    $t30 = array( 1.07, 2.41, 3.66, 4.88, 6.06, 7.23, 8.38, 9.52, 10.66, 11.78 );
    $t20 = array( 1.64, 3.22, 4.64, 5.99, 7.29, 8.56, 9.80, 11.03, 12.24, 13.44 );
    $t10 = array( 2.71, 4.61, 6.25, 7.78, 9.24, 10.64, 12.02, 13.36, 14.68, 15.99 );
    $t5 = array( 3.84, 5.99, 7.81, 9.49, 11.07, 12.59, 14.07, 15.51, 16.92, 18.31 );
    $t2 = array( 5.41, 7.82, 9.84, 9.84, 11.67, 15.03, 16.62, 18.17, 19.68, 21.16 );
    $t1 = array( 6.63, 9.21, 11.34, 11.34, 13.28, 16.81, 18.48, 20.09, 21.67, 23.21 );
    $tableX = array( $tLegend, $t99, $t90, $t80, $t70, $t60, $t50,
     $t40, $t30, $t20, $t10, $t5, $t2, $t1 );
    return $tableX;
  }

  function getAdjustment( $tableX, $v, $sumSquareX ) {
    $i = 0;
    while ( $tableX[$v + 1][$i] <= $sumSquareX ) {
      ++$i;
    }
      echo "validite de l'ajustement :\t" . $tableX[0][$i] . "% < P < " . $tableX[0][$i - 1] . "%\n";
  }

  function checkArgs( $argv ) {
    $tmp_res = 0;
    for ( $i = 1; $i < 10; ++$i ) {
      if ( !is_numeric( $argv[$i] ) ) {
        echo "Error: [" . $argv[$i] . "] must be a number.\n";
        usage();
      }
      if ( $argv[$i] < 0 ) {
        echo "Error: [" . $argv[$i] . "] must be positif.\n";
        usage();
      }
      $tmp_res += $argv[$i];
    }
    return ( $tmp_res == 100 );
  }

  function main ( $argv ) {
    $tableX = NULL;
    $sumSquareX = 0;
    if ( count( $argv ) !=  10 ) {
      usage();
    }
    $tableX = setTableX();
    if ( !checkArgs( $argv ) ) {
      echo "Error: the total must be 100.\n";
      usage();
    }
    $v = display( array_slice( $argv, 1 ), $sumSquareX );
    getAdjustment( $tableX, $v, $sumSquareX );
  }
  main( $argv );
?>
